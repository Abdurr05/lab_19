
c:/Users/Abdurrahman/Documents/labs/lab_19/target/3.0.0/argon/lab_19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001990  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d59b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e5c8  000d59b4  0001e5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001c0  2003e630  2003e630  0002e630  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5a1c  000d5a1c  00025a1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5a44  000d5a44  00025a44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00179fef  00000000  00000000  00025a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015eef  00000000  00000000  0019fa37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00030ba0  00000000  00000000  001b5926  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029c0  00000000  00000000  001e64c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008858  00000000  00000000  001e8e86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039c20  00000000  00000000  001f16de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003a5be  00000000  00000000  0022b2fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00125b2e  00000000  00000000  002658bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000071e4  00000000  00000000  0038b3ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f001 fba3 	bl	d577c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f001 fbab 	bl	d5798 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e5c8 	.word	0x2003e5c8
   d404c:	000d59b4 	.word	0x000d59b4
   d4050:	2003e630 	.word	0x2003e630
   d4054:	2003e630 	.word	0x2003e630
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f000 fc0d 	bl	d4880 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d5988 	.word	0x000d5988
   d4080:	000d59ac 	.word	0x000d59ac

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b81c 	b.w	d40c0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f847 	bl	d411c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f000 bbb7 	b.w	d4804 <_post_loop>

000d4096 <_Znaj>:
   d4096:	f000 ba53 	b.w	d4540 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 ba59 	b.w	d4550 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ae:	b510      	push	{r4, lr}
   d40b0:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40b2:	6800      	ldr	r0, [r0, #0]
   d40b4:	b108      	cbz	r0, d40ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b6:	f000 fa4b 	bl	d4550 <free>
class SystemClass {
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}
	...

000d40c0 <setup>:
SYSTEM_MODE(MANUAL);
#include "WatchDog_WCL.h"

WatchDog wd;

void setup() {
   d40c0:	b507      	push	{r0, r1, r2, lr}
    pinMode(D6, INPUT_PULLUP);
   d40c2:	2102      	movs	r1, #2
   d40c4:	2006      	movs	r0, #6
   d40c6:	f000 feef 	bl	d4ea8 <pinMode>
    RGB.control(true);
   d40ca:	2001      	movs	r0, #1
   d40cc:	f000 fb47 	bl	d475e <_ZN8RGBClass7controlEb>
    inline bool enabled(system_flag_t flag) const {
        return get_flag(flag) != 0;
    }

    inline int resetReason() const {
        int reason = RESET_REASON_NONE;
   d40d0:	2100      	movs	r1, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d40d2:	460a      	mov	r2, r1
   d40d4:	a801      	add	r0, sp, #4
        int reason = RESET_REASON_NONE;
   d40d6:	9101      	str	r1, [sp, #4]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d40d8:	f000 f8a6 	bl	d4228 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d40dc:	9b01      	ldr	r3, [sp, #4]
    if  (System.resetReason() == RESET_REASON_WATCHDOG) {
   d40de:	2b3c      	cmp	r3, #60	; 0x3c
   d40e0:	f04f 0100 	mov.w	r1, #0
   d40e4:	d112      	bne.n	d410c <setup+0x4c>
        RGB.color(255,0,0);
   d40e6:	20ff      	movs	r0, #255	; 0xff
   d40e8:	460a      	mov	r2, r1
   d40ea:	f000 fb48 	bl	d477e <_ZN8RGBClass5colorEiii>
        delay(CONCURRENT_WAIT_FOREVER);
   d40ee:	f04f 30ff 	mov.w	r0, #4294967295
   d40f2:	f000 fb2b 	bl	d474c <delay>
    }  else {
        RGB.color(0,0,255);
    }
    wd.initialize(5000);
   d40f6:	f241 3188 	movw	r1, #5000	; 0x1388
   d40fa:	4807      	ldr	r0, [pc, #28]	; (d4118 <setup+0x58>)
   d40fc:	f000 f838 	bl	d4170 <_ZN8WatchDog10initializeEm>
    wd.pet();
   d4100:	4805      	ldr	r0, [pc, #20]	; (d4118 <setup+0x58>)
   d4102:	f000 f851 	bl	d41a8 <_ZN8WatchDog3petEv>
}
   d4106:	b003      	add	sp, #12
   d4108:	f85d fb04 	ldr.w	pc, [sp], #4
        RGB.color(0,0,255);
   d410c:	22ff      	movs	r2, #255	; 0xff
   d410e:	4608      	mov	r0, r1
   d4110:	f000 fb35 	bl	d477e <_ZN8RGBClass5colorEiii>
   d4114:	e7ef      	b.n	d40f6 <setup+0x36>
   d4116:	bf00      	nop
   d4118:	2003e640 	.word	0x2003e640

000d411c <loop>:

void loop() {
   d411c:	b508      	push	{r3, lr}
    if (digitalRead(D6) == LOW) {
   d411e:	2006      	movs	r0, #6
   d4120:	f000 fed3 	bl	d4eca <digitalRead>
   d4124:	b920      	cbnz	r0, d4130 <loop+0x14>
        wd.pet();
    }
}
   d4126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        wd.pet();
   d412a:	4802      	ldr	r0, [pc, #8]	; (d4134 <loop+0x18>)
   d412c:	f000 b83c 	b.w	d41a8 <_ZN8WatchDog3petEv>
}
   d4130:	bd08      	pop	{r3, pc}
   d4132:	bf00      	nop
   d4134:	2003e640 	.word	0x2003e640

000d4138 <_GLOBAL__sub_I_SystemMode>:
   d4138:	b510      	push	{r4, lr}
              error_(SYSTEM_ERROR_NONE) {
   d413a:	4c09      	ldr	r4, [pc, #36]	; (d4160 <_GLOBAL__sub_I_SystemMode+0x28>)
   d413c:	2300      	movs	r3, #0
   d413e:	6023      	str	r3, [r4, #0]
   d4140:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d4142:	71a3      	strb	r3, [r4, #6]
        set_system_mode(mode);
   d4144:	2003      	movs	r0, #3
    SleepResult() {}
   d4146:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   d414a:	60a3      	str	r3, [r4, #8]
        set_system_mode(mode);
   d414c:	f000 f96c 	bl	d4428 <set_system_mode>
SYSTEM_MODE(MANUAL);
   d4150:	4620      	mov	r0, r4
   d4152:	4a04      	ldr	r2, [pc, #16]	; (d4164 <_GLOBAL__sub_I_SystemMode+0x2c>)
   d4154:	4904      	ldr	r1, [pc, #16]	; (d4168 <_GLOBAL__sub_I_SystemMode+0x30>)
}
   d4156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_MODE(MANUAL);
   d415a:	f000 bf09 	b.w	d4f70 <__aeabi_atexit>
   d415e:	bf00      	nop
   d4160:	2003e634 	.word	0x2003e634
   d4164:	2003e630 	.word	0x2003e630
   d4168:	000d40af 	.word	0x000d40af
   d416c:	00000000 	.word	0x00000000

000d4170 <_ZN8WatchDog10initializeEm>:
#include "WatchDog_WCL.h"

void WatchDog::initialize(uint32_t timeInMilliseconds) {
    *(uint32_t *) WDT_RREN_REG = 0x00000001;
   d4170:	4b0b      	ldr	r3, [pc, #44]	; (d41a0 <_ZN8WatchDog10initializeEm+0x30>)
void WatchDog::initialize(uint32_t timeInMilliseconds) {
   d4172:	b510      	push	{r4, lr}
    *(uint32_t *) WDT_RREN_REG = 0x00000001;
   d4174:	2401      	movs	r4, #1
   d4176:	601c      	str	r4, [r3, #0]
    *(uint32_t *) WDT_CRV_REG = (uint32_t) (timeInMilliseconds * 32.768);
   d4178:	4608      	mov	r0, r1
   d417a:	f001 f845 	bl	d5208 <__aeabi_ui2d>
   d417e:	a306      	add	r3, pc, #24	; (adr r3, d4198 <_ZN8WatchDog10initializeEm+0x28>)
   d4180:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4184:	f001 f8ba 	bl	d52fc <__aeabi_dmul>
   d4188:	f001 faca 	bl	d5720 <__aeabi_d2uiz>
   d418c:	4b05      	ldr	r3, [pc, #20]	; (d41a4 <_ZN8WatchDog10initializeEm+0x34>)
   d418e:	6018      	str	r0, [r3, #0]
    *(uint32_t *) WDT_REG = 0x00000001;
   d4190:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
   d4194:	601c      	str	r4, [r3, #0]
}
   d4196:	bd10      	pop	{r4, pc}
   d4198:	d2f1a9fc 	.word	0xd2f1a9fc
   d419c:	4040624d 	.word	0x4040624d
   d41a0:	40010508 	.word	0x40010508
   d41a4:	40010504 	.word	0x40010504

000d41a8 <_ZN8WatchDog3petEv>:

void WatchDog::pet() {
    *(uint32_t *) WDT_RR0_REG = WDT_RELOAD;
   d41a8:	4b01      	ldr	r3, [pc, #4]	; (d41b0 <_ZN8WatchDog3petEv+0x8>)
   d41aa:	4a02      	ldr	r2, [pc, #8]	; (d41b4 <_ZN8WatchDog3petEv+0xc>)
   d41ac:	601a      	str	r2, [r3, #0]
}
   d41ae:	4770      	bx	lr
   d41b0:	40010600 	.word	0x40010600
   d41b4:	6e524635 	.word	0x6e524635

000d41b8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d41b8:	b508      	push	{r3, lr}
   d41ba:	4b02      	ldr	r3, [pc, #8]	; (d41c4 <netdb_freeaddrinfo+0xc>)
   d41bc:	681b      	ldr	r3, [r3, #0]
   d41be:	689b      	ldr	r3, [r3, #8]
   d41c0:	9301      	str	r3, [sp, #4]
   d41c2:	bd08      	pop	{r3, pc}
   d41c4:	00030268 	.word	0x00030268

000d41c8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d41c8:	b508      	push	{r3, lr}
   d41ca:	4b02      	ldr	r3, [pc, #8]	; (d41d4 <netdb_getaddrinfo+0xc>)
   d41cc:	681b      	ldr	r3, [r3, #0]
   d41ce:	68db      	ldr	r3, [r3, #12]
   d41d0:	9301      	str	r3, [sp, #4]
   d41d2:	bd08      	pop	{r3, pc}
   d41d4:	00030268 	.word	0x00030268

000d41d8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d41d8:	b508      	push	{r3, lr}
   d41da:	4b02      	ldr	r3, [pc, #8]	; (d41e4 <HAL_Pin_Mode+0xc>)
   d41dc:	681b      	ldr	r3, [r3, #0]
   d41de:	689b      	ldr	r3, [r3, #8]
   d41e0:	9301      	str	r3, [sp, #4]
   d41e2:	bd08      	pop	{r3, pc}
   d41e4:	0003022c 	.word	0x0003022c

000d41e8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d41e8:	b508      	push	{r3, lr}
   d41ea:	4b02      	ldr	r3, [pc, #8]	; (d41f4 <HAL_Get_Pin_Mode+0xc>)
   d41ec:	681b      	ldr	r3, [r3, #0]
   d41ee:	68db      	ldr	r3, [r3, #12]
   d41f0:	9301      	str	r3, [sp, #4]
   d41f2:	bd08      	pop	{r3, pc}
   d41f4:	0003022c 	.word	0x0003022c

000d41f8 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d41f8:	b508      	push	{r3, lr}
   d41fa:	4b02      	ldr	r3, [pc, #8]	; (d4204 <HAL_GPIO_Read+0xc>)
   d41fc:	681b      	ldr	r3, [r3, #0]
   d41fe:	695b      	ldr	r3, [r3, #20]
   d4200:	9301      	str	r3, [sp, #4]
   d4202:	bd08      	pop	{r3, pc}
   d4204:	0003022c 	.word	0x0003022c

000d4208 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4208:	b508      	push	{r3, lr}
   d420a:	4b02      	ldr	r3, [pc, #8]	; (d4214 <HAL_RNG_GetRandomNumber+0xc>)
   d420c:	681b      	ldr	r3, [r3, #0]
   d420e:	685b      	ldr	r3, [r3, #4]
   d4210:	9301      	str	r3, [sp, #4]
   d4212:	bd08      	pop	{r3, pc}
   d4214:	00030218 	.word	0x00030218

000d4218 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4218:	b508      	push	{r3, lr}
   d421a:	4b02      	ldr	r3, [pc, #8]	; (d4224 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d421c:	681b      	ldr	r3, [r3, #0]
   d421e:	695b      	ldr	r3, [r3, #20]
   d4220:	9301      	str	r3, [sp, #4]
   d4222:	bd08      	pop	{r3, pc}
   d4224:	00030218 	.word	0x00030218

000d4228 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d4228:	b508      	push	{r3, lr}
   d422a:	4b02      	ldr	r3, [pc, #8]	; (d4234 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d422c:	681b      	ldr	r3, [r3, #0]
   d422e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4230:	9301      	str	r3, [sp, #4]
   d4232:	bd08      	pop	{r3, pc}
   d4234:	00030234 	.word	0x00030234

000d4238 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4238:	b508      	push	{r3, lr}
   d423a:	4b02      	ldr	r3, [pc, #8]	; (d4244 <os_mutex_recursive_create+0xc>)
   d423c:	681b      	ldr	r3, [r3, #0]
   d423e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4240:	9301      	str	r3, [sp, #4]
   d4242:	bd08      	pop	{r3, pc}
   d4244:	00030248 	.word	0x00030248

000d4248 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4248:	b508      	push	{r3, lr}
   d424a:	4b02      	ldr	r3, [pc, #8]	; (d4254 <os_mutex_recursive_destroy+0xc>)
   d424c:	681b      	ldr	r3, [r3, #0]
   d424e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4250:	9301      	str	r3, [sp, #4]
   d4252:	bd08      	pop	{r3, pc}
   d4254:	00030248 	.word	0x00030248

000d4258 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4258:	b508      	push	{r3, lr}
   d425a:	4b02      	ldr	r3, [pc, #8]	; (d4264 <inet_inet_ntop+0xc>)
   d425c:	681b      	ldr	r3, [r3, #0]
   d425e:	695b      	ldr	r3, [r3, #20]
   d4260:	9301      	str	r3, [sp, #4]
   d4262:	bd08      	pop	{r3, pc}
   d4264:	00030264 	.word	0x00030264

000d4268 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4268:	b508      	push	{r3, lr}
   d426a:	4b02      	ldr	r3, [pc, #8]	; (d4274 <hal_usart_init+0xc>)
   d426c:	681b      	ldr	r3, [r3, #0]
   d426e:	681b      	ldr	r3, [r3, #0]
   d4270:	9301      	str	r3, [sp, #4]
   d4272:	bd08      	pop	{r3, pc}
   d4274:	0003023c 	.word	0x0003023c

000d4278 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4278:	b508      	push	{r3, lr}
   d427a:	4b02      	ldr	r3, [pc, #8]	; (d4284 <hal_usart_write+0xc>)
   d427c:	681b      	ldr	r3, [r3, #0]
   d427e:	68db      	ldr	r3, [r3, #12]
   d4280:	9301      	str	r3, [sp, #4]
   d4282:	bd08      	pop	{r3, pc}
   d4284:	0003023c 	.word	0x0003023c

000d4288 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4288:	b508      	push	{r3, lr}
   d428a:	4b02      	ldr	r3, [pc, #8]	; (d4294 <hal_usart_available+0xc>)
   d428c:	681b      	ldr	r3, [r3, #0]
   d428e:	691b      	ldr	r3, [r3, #16]
   d4290:	9301      	str	r3, [sp, #4]
   d4292:	bd08      	pop	{r3, pc}
   d4294:	0003023c 	.word	0x0003023c

000d4298 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4298:	b508      	push	{r3, lr}
   d429a:	4b02      	ldr	r3, [pc, #8]	; (d42a4 <hal_usart_read+0xc>)
   d429c:	681b      	ldr	r3, [r3, #0]
   d429e:	695b      	ldr	r3, [r3, #20]
   d42a0:	9301      	str	r3, [sp, #4]
   d42a2:	bd08      	pop	{r3, pc}
   d42a4:	0003023c 	.word	0x0003023c

000d42a8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d42a8:	b508      	push	{r3, lr}
   d42aa:	4b02      	ldr	r3, [pc, #8]	; (d42b4 <hal_usart_peek+0xc>)
   d42ac:	681b      	ldr	r3, [r3, #0]
   d42ae:	699b      	ldr	r3, [r3, #24]
   d42b0:	9301      	str	r3, [sp, #4]
   d42b2:	bd08      	pop	{r3, pc}
   d42b4:	0003023c 	.word	0x0003023c

000d42b8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d42b8:	b508      	push	{r3, lr}
   d42ba:	4b02      	ldr	r3, [pc, #8]	; (d42c4 <hal_usart_flush+0xc>)
   d42bc:	681b      	ldr	r3, [r3, #0]
   d42be:	69db      	ldr	r3, [r3, #28]
   d42c0:	9301      	str	r3, [sp, #4]
   d42c2:	bd08      	pop	{r3, pc}
   d42c4:	0003023c 	.word	0x0003023c

000d42c8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d42c8:	b508      	push	{r3, lr}
   d42ca:	4b02      	ldr	r3, [pc, #8]	; (d42d4 <hal_usart_is_enabled+0xc>)
   d42cc:	681b      	ldr	r3, [r3, #0]
   d42ce:	6a1b      	ldr	r3, [r3, #32]
   d42d0:	9301      	str	r3, [sp, #4]
   d42d2:	bd08      	pop	{r3, pc}
   d42d4:	0003023c 	.word	0x0003023c

000d42d8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d42d8:	b508      	push	{r3, lr}
   d42da:	4b02      	ldr	r3, [pc, #8]	; (d42e4 <hal_usart_available_data_for_write+0xc>)
   d42dc:	681b      	ldr	r3, [r3, #0]
   d42de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d42e0:	9301      	str	r3, [sp, #4]
   d42e2:	bd08      	pop	{r3, pc}
   d42e4:	0003023c 	.word	0x0003023c

000d42e8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d42e8:	b508      	push	{r3, lr}
   d42ea:	4b02      	ldr	r3, [pc, #8]	; (d42f4 <hal_i2c_write+0xc>)
   d42ec:	681b      	ldr	r3, [r3, #0]
   d42ee:	6a1b      	ldr	r3, [r3, #32]
   d42f0:	9301      	str	r3, [sp, #4]
   d42f2:	bd08      	pop	{r3, pc}
   d42f4:	00030228 	.word	0x00030228

000d42f8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d42f8:	b508      	push	{r3, lr}
   d42fa:	4b02      	ldr	r3, [pc, #8]	; (d4304 <hal_i2c_available+0xc>)
   d42fc:	681b      	ldr	r3, [r3, #0]
   d42fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4300:	9301      	str	r3, [sp, #4]
   d4302:	bd08      	pop	{r3, pc}
   d4304:	00030228 	.word	0x00030228

000d4308 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4308:	b508      	push	{r3, lr}
   d430a:	4b02      	ldr	r3, [pc, #8]	; (d4314 <hal_i2c_read+0xc>)
   d430c:	681b      	ldr	r3, [r3, #0]
   d430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	bd08      	pop	{r3, pc}
   d4314:	00030228 	.word	0x00030228

000d4318 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4318:	b508      	push	{r3, lr}
   d431a:	4b02      	ldr	r3, [pc, #8]	; (d4324 <hal_i2c_peek+0xc>)
   d431c:	681b      	ldr	r3, [r3, #0]
   d431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4320:	9301      	str	r3, [sp, #4]
   d4322:	bd08      	pop	{r3, pc}
   d4324:	00030228 	.word	0x00030228

000d4328 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b02      	ldr	r3, [pc, #8]	; (d4334 <hal_i2c_flush+0xc>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4330:	9301      	str	r3, [sp, #4]
   d4332:	bd08      	pop	{r3, pc}
   d4334:	00030228 	.word	0x00030228

000d4338 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <hal_i2c_is_enabled+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	00030228 	.word	0x00030228

000d4348 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <hal_i2c_init+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	00030228 	.word	0x00030228

000d4358 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <hal_spi_init+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	69db      	ldr	r3, [r3, #28]
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	00030230 	.word	0x00030230

000d4368 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <hal_spi_is_enabled+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	6a1b      	ldr	r3, [r3, #32]
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	00030230 	.word	0x00030230

000d4378 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <HAL_USB_USART_Init+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	681b      	ldr	r3, [r3, #0]
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	0003024c 	.word	0x0003024c

000d4388 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <HAL_USB_USART_Available_Data+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	691b      	ldr	r3, [r3, #16]
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	0003024c 	.word	0x0003024c

000d4398 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	695b      	ldr	r3, [r3, #20]
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	0003024c 	.word	0x0003024c

000d43a8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <HAL_USB_USART_Receive_Data+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	699b      	ldr	r3, [r3, #24]
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	0003024c 	.word	0x0003024c

000d43b8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <HAL_USB_USART_Send_Data+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	69db      	ldr	r3, [r3, #28]
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	0003024c 	.word	0x0003024c

000d43c8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <HAL_USB_USART_Flush_Data+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	6a1b      	ldr	r3, [r3, #32]
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	0003024c 	.word	0x0003024c

000d43d8 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <LED_SetSignalingColor+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	685b      	ldr	r3, [r3, #4]
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	00030260 	.word	0x00030260

000d43e8 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <LED_Signaling_Start+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	689b      	ldr	r3, [r3, #8]
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	00030260 	.word	0x00030260

000d43f8 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <LED_Signaling_Stop+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	68db      	ldr	r3, [r3, #12]
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	00030260 	.word	0x00030260

000d4408 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <LED_RGB_IsOverRidden+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	699b      	ldr	r3, [r3, #24]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	00030260 	.word	0x00030260

000d4418 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <LED_On+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	69db      	ldr	r3, [r3, #28]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	00030260 	.word	0x00030260

000d4428 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <set_system_mode+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	685b      	ldr	r3, [r3, #4]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	00030220 	.word	0x00030220

000d4438 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <system_delay_ms+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	695b      	ldr	r3, [r3, #20]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	00030220 	.word	0x00030220

000d4448 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b03      	ldr	r3, [pc, #12]	; (d4458 <system_ctrl_set_app_request_handler+0x10>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4452:	9301      	str	r3, [sp, #4]
   d4454:	bd08      	pop	{r3, pc}
   d4456:	0000      	.short	0x0000
   d4458:	00030220 	.word	0x00030220

000d445c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b03      	ldr	r3, [pc, #12]	; (d446c <system_ctrl_set_result+0x10>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4466:	9301      	str	r3, [sp, #4]
   d4468:	bd08      	pop	{r3, pc}
   d446a:	0000      	.short	0x0000
   d446c:	00030220 	.word	0x00030220

000d4470 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <network_connect+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	685b      	ldr	r3, [r3, #4]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	00030240 	.word	0x00030240

000d4480 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <network_connecting+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	689b      	ldr	r3, [r3, #8]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	00030240 	.word	0x00030240

000d4490 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <network_disconnect+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	68db      	ldr	r3, [r3, #12]
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	00030240 	.word	0x00030240

000d44a0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <network_ready+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	691b      	ldr	r3, [r3, #16]
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	00030240 	.word	0x00030240

000d44b0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <network_on+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	695b      	ldr	r3, [r3, #20]
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	00030240 	.word	0x00030240

000d44c0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <network_off+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	699b      	ldr	r3, [r3, #24]
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	00030240 	.word	0x00030240

000d44d0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <network_listen+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	69db      	ldr	r3, [r3, #28]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030240 	.word	0x00030240

000d44e0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <network_listening+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	6a1b      	ldr	r3, [r3, #32]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030240 	.word	0x00030240

000d44f0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <network_set_listen_timeout+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030240 	.word	0x00030240

000d4500 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <network_get_listen_timeout+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030240 	.word	0x00030240

000d4510 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <network_is_on+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030240 	.word	0x00030240

000d4520 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <network_is_off+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030240 	.word	0x00030240

000d4530 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030244 	.word	0x00030244

000d4540 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <malloc+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	681b      	ldr	r3, [r3, #0]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	0003021c 	.word	0x0003021c

000d4550 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <free+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	685b      	ldr	r3, [r3, #4]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	0003021c 	.word	0x0003021c

000d4560 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <newlib_impure_ptr_callback+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	0003021c 	.word	0x0003021c

000d4570 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4570:	2200      	movs	r2, #0
   d4572:	6840      	ldr	r0, [r0, #4]
   d4574:	4611      	mov	r1, r2
   d4576:	f7ff bfb3 	b.w	d44e0 <network_listening>

000d457a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d457a:	2200      	movs	r2, #0
   d457c:	6840      	ldr	r0, [r0, #4]
   d457e:	4611      	mov	r1, r2
   d4580:	f7ff bfbe 	b.w	d4500 <network_get_listen_timeout>

000d4584 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4584:	6840      	ldr	r0, [r0, #4]
   d4586:	2200      	movs	r2, #0
   d4588:	f7ff bfb2 	b.w	d44f0 <network_set_listen_timeout>

000d458c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d458c:	6840      	ldr	r0, [r0, #4]
   d458e:	2200      	movs	r2, #0
   d4590:	f081 0101 	eor.w	r1, r1, #1
   d4594:	f7ff bf9c 	b.w	d44d0 <network_listen>

000d4598 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4598:	2300      	movs	r3, #0
   d459a:	6840      	ldr	r0, [r0, #4]
   d459c:	461a      	mov	r2, r3
   d459e:	4619      	mov	r1, r3
   d45a0:	f7ff bf8e 	b.w	d44c0 <network_off>

000d45a4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d45a4:	2300      	movs	r3, #0
   d45a6:	6840      	ldr	r0, [r0, #4]
   d45a8:	461a      	mov	r2, r3
   d45aa:	4619      	mov	r1, r3
   d45ac:	f7ff bf80 	b.w	d44b0 <network_on>

000d45b0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d45b0:	2200      	movs	r2, #0
   d45b2:	6840      	ldr	r0, [r0, #4]
   d45b4:	4611      	mov	r1, r2
   d45b6:	f7ff bf73 	b.w	d44a0 <network_ready>

000d45ba <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d45ba:	2200      	movs	r2, #0
   d45bc:	6840      	ldr	r0, [r0, #4]
   d45be:	4611      	mov	r1, r2
   d45c0:	f7ff bf5e 	b.w	d4480 <network_connecting>

000d45c4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d45c4:	6840      	ldr	r0, [r0, #4]
   d45c6:	2200      	movs	r2, #0
   d45c8:	2102      	movs	r1, #2
   d45ca:	f7ff bf61 	b.w	d4490 <network_disconnect>

000d45ce <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d45ce:	2300      	movs	r3, #0
   d45d0:	6840      	ldr	r0, [r0, #4]
   d45d2:	461a      	mov	r2, r3
   d45d4:	f7ff bf4c 	b.w	d4470 <network_connect>

000d45d8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d45d8:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d45da:	2203      	movs	r2, #3
   d45dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d45de:	4a02      	ldr	r2, [pc, #8]	; (d45e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d45e0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d45e2:	4770      	bx	lr
   d45e4:	2003e650 	.word	0x2003e650
   d45e8:	000d581c 	.word	0x000d581c

000d45ec <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d45ec:	b510      	push	{r4, lr}
   d45ee:	4604      	mov	r4, r0
   d45f0:	4608      	mov	r0, r1
{
    _spi = spi;
   d45f2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d45f4:	f7ff feb0 	bl	d4358 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d45f8:	2300      	movs	r3, #0
   d45fa:	6063      	str	r3, [r4, #4]
}
   d45fc:	4620      	mov	r0, r4
   d45fe:	bd10      	pop	{r4, pc}

000d4600 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4600:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4602:	4b09      	ldr	r3, [pc, #36]	; (d4628 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4604:	4c09      	ldr	r4, [pc, #36]	; (d462c <_GLOBAL__sub_I_System+0x2c>)
   d4606:	2202      	movs	r2, #2
   d4608:	2000      	movs	r0, #0
   d460a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d460c:	4b08      	ldr	r3, [pc, #32]	; (d4630 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d460e:	6020      	str	r0, [r4, #0]
   d4610:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4612:	71a0      	strb	r0, [r4, #6]
   d4614:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4616:	f7ff ff07 	bl	d4428 <set_system_mode>
SystemClass System;
   d461a:	4620      	mov	r0, r4
   d461c:	4a05      	ldr	r2, [pc, #20]	; (d4634 <_GLOBAL__sub_I_System+0x34>)
   d461e:	4906      	ldr	r1, [pc, #24]	; (d4638 <_GLOBAL__sub_I_System+0x38>)
   d4620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4624:	f000 bca4 	b.w	d4f70 <__aeabi_atexit>
   d4628:	2003e664 	.word	0x2003e664
   d462c:	2003e658 	.word	0x2003e658
   d4630:	ffff0000 	.word	0xffff0000
   d4634:	2003e630 	.word	0x2003e630
   d4638:	000d40af 	.word	0x000d40af

000d463c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d463c:	b510      	push	{r4, lr}
   d463e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4640:	6800      	ldr	r0, [r0, #0]
   d4642:	b108      	cbz	r0, d4648 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4644:	f7ff fe00 	bl	d4248 <os_mutex_recursive_destroy>
    }
   d4648:	4620      	mov	r0, r4
   d464a:	bd10      	pop	{r4, pc}

000d464c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d464c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d464e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4650:	4604      	mov	r4, r0
      if (_M_manager)
   d4652:	b113      	cbz	r3, d465a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4654:	2203      	movs	r2, #3
   d4656:	4601      	mov	r1, r0
   d4658:	4798      	blx	r3
    }
   d465a:	4620      	mov	r0, r4
   d465c:	bd10      	pop	{r4, pc}
	...

000d4660 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d4660:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4662:	4c06      	ldr	r4, [pc, #24]	; (d467c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4664:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4666:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4668:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d466a:	f7ff fde5 	bl	d4238 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d466e:	4620      	mov	r0, r4
   d4670:	4a03      	ldr	r2, [pc, #12]	; (d4680 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4672:	4904      	ldr	r1, [pc, #16]	; (d4684 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4678:	f000 bc7a 	b.w	d4f70 <__aeabi_atexit>
   d467c:	2003e668 	.word	0x2003e668
   d4680:	2003e630 	.word	0x2003e630
   d4684:	000d463d 	.word	0x000d463d

000d4688 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d468a:	4606      	mov	r6, r0
   d468c:	460d      	mov	r5, r1
  size_t n = 0;
   d468e:	188f      	adds	r7, r1, r2
   d4690:	2400      	movs	r4, #0
  while (size--) {
   d4692:	42bd      	cmp	r5, r7
   d4694:	d00c      	beq.n	d46b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4696:	6833      	ldr	r3, [r6, #0]
   d4698:	f815 1b01 	ldrb.w	r1, [r5], #1
   d469c:	689b      	ldr	r3, [r3, #8]
   d469e:	4630      	mov	r0, r6
   d46a0:	4798      	blx	r3
     if (chunk>=0)
   d46a2:	1e03      	subs	r3, r0, #0
   d46a4:	db01      	blt.n	d46aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d46a6:	441c      	add	r4, r3
  while (size--) {
   d46a8:	e7f3      	b.n	d4692 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d46aa:	2c00      	cmp	r4, #0
   d46ac:	bf08      	it	eq
   d46ae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d46b0:	4620      	mov	r0, r4
   d46b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d46b4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d46b4:	b513      	push	{r0, r1, r4, lr}
   d46b6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d46b8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d46ba:	b159      	cbz	r1, d46d4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d46bc:	9101      	str	r1, [sp, #4]
   d46be:	f001 f897 	bl	d57f0 <strlen>
   d46c2:	6823      	ldr	r3, [r4, #0]
   d46c4:	9901      	ldr	r1, [sp, #4]
   d46c6:	68db      	ldr	r3, [r3, #12]
   d46c8:	4602      	mov	r2, r0
   d46ca:	4620      	mov	r0, r4
    }
   d46cc:	b002      	add	sp, #8
   d46ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d46d2:	4718      	bx	r3
    }
   d46d4:	b002      	add	sp, #8
   d46d6:	bd10      	pop	{r4, pc}

000d46d8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d46d8:	6803      	ldr	r3, [r0, #0]
   d46da:	689b      	ldr	r3, [r3, #8]
   d46dc:	4718      	bx	r3

000d46de <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d46de:	b530      	push	{r4, r5, lr}
   d46e0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d46e2:	2300      	movs	r3, #0
   d46e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d46e8:	2a01      	cmp	r2, #1
   d46ea:	bf98      	it	ls
   d46ec:	220a      	movls	r2, #10
   d46ee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d46f0:	460d      	mov	r5, r1
   d46f2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d46f6:	fb01 5312 	mls	r3, r1, r2, r5
   d46fa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d46fe:	2b09      	cmp	r3, #9
   d4700:	bf94      	ite	ls
   d4702:	3330      	addls	r3, #48	; 0x30
   d4704:	3337      	addhi	r3, #55	; 0x37
   d4706:	b2db      	uxtb	r3, r3
  } while(n);
   d4708:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d470a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d470e:	d9ef      	bls.n	d46f0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4710:	4621      	mov	r1, r4
   d4712:	f7ff ffcf 	bl	d46b4 <_ZN5Print5writeEPKc>
}
   d4716:	b00b      	add	sp, #44	; 0x2c
   d4718:	bd30      	pop	{r4, r5, pc}

000d471a <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d471a:	2300      	movs	r3, #0
   d471c:	6840      	ldr	r0, [r0, #4]
   d471e:	461a      	mov	r2, r3
   d4720:	4619      	mov	r1, r3
   d4722:	f7ff bec5 	b.w	d44b0 <network_on>
	...

000d4728 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4728:	4b01      	ldr	r3, [pc, #4]	; (d4730 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d472a:	4a02      	ldr	r2, [pc, #8]	; (d4734 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d472c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d472e:	4770      	bx	lr
   d4730:	2003e66c 	.word	0x2003e66c
   d4734:	000d5850 	.word	0x000d5850

000d4738 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4738:	4b02      	ldr	r3, [pc, #8]	; (d4744 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d473a:	681a      	ldr	r2, [r3, #0]
   d473c:	4b02      	ldr	r3, [pc, #8]	; (d4748 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d473e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4740:	4770      	bx	lr
   d4742:	bf00      	nop
   d4744:	2003e5c8 	.word	0x2003e5c8
   d4748:	2003e670 	.word	0x2003e670

000d474c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d474c:	2100      	movs	r1, #0
   d474e:	f7ff be73 	b.w	d4438 <system_delay_ms>

000d4752 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4752:	b510      	push	{r4, lr}
   d4754:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4756:	f7ff ff79 	bl	d464c <_ZNSt14_Function_baseD1Ev>
   d475a:	4620      	mov	r0, r4
   d475c:	bd10      	pop	{r4, pc}

000d475e <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d475e:	b510      	push	{r4, lr}
   d4760:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   d4762:	f7ff fe51 	bl	d4408 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   d4766:	4284      	cmp	r4, r0
   d4768:	d008      	beq.n	d477c <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d476a:	b11c      	cbz	r4, d4774 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d476c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   d4770:	f7ff be3a 	b.w	d43e8 <LED_Signaling_Start>
}
   d4774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   d4778:	f7ff be3e 	b.w	d43f8 <LED_Signaling_Stop>
}
   d477c:	bd10      	pop	{r4, pc}

000d477e <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d477e:	b570      	push	{r4, r5, r6, lr}
   d4780:	4605      	mov	r5, r0
   d4782:	460e      	mov	r6, r1
   d4784:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   d4786:	f7ff fe3f 	bl	d4408 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   d478a:	b150      	cbz	r0, d47a2 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d478c:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d4790:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d4794:	f7ff fe20 	bl	d43d8 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
   d4798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
   d479c:	20e7      	movs	r0, #231	; 0xe7
   d479e:	f7ff be3b 	b.w	d4418 <LED_On>
}
   d47a2:	bd70      	pop	{r4, r5, r6, pc}

000d47a4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d47a4:	4803      	ldr	r0, [pc, #12]	; (d47b4 <_GLOBAL__sub_I_RGB+0x10>)
RGBClass RGB;
   d47a6:	4a04      	ldr	r2, [pc, #16]	; (d47b8 <_GLOBAL__sub_I_RGB+0x14>)
   d47a8:	4904      	ldr	r1, [pc, #16]	; (d47bc <_GLOBAL__sub_I_RGB+0x18>)
   d47aa:	2300      	movs	r3, #0
   d47ac:	6083      	str	r3, [r0, #8]
   d47ae:	f000 bbdf 	b.w	d4f70 <__aeabi_atexit>
   d47b2:	bf00      	nop
   d47b4:	2003e674 	.word	0x2003e674
   d47b8:	2003e630 	.word	0x2003e630
   d47bc:	000d4753 	.word	0x000d4753

000d47c0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d47c0:	4b01      	ldr	r3, [pc, #4]	; (d47c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d47c2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d47c4:	4770      	bx	lr
   d47c6:	bf00      	nop
   d47c8:	2003e5cc 	.word	0x2003e5cc

000d47cc <serialEventRun>:
{
   d47cc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d47ce:	4b0b      	ldr	r3, [pc, #44]	; (d47fc <serialEventRun+0x30>)
   d47d0:	b143      	cbz	r3, d47e4 <serialEventRun+0x18>
   d47d2:	f000 f957 	bl	d4a84 <_Z16_fetch_usbserialv>
   d47d6:	6803      	ldr	r3, [r0, #0]
   d47d8:	691b      	ldr	r3, [r3, #16]
   d47da:	4798      	blx	r3
   d47dc:	2800      	cmp	r0, #0
   d47de:	dd01      	ble.n	d47e4 <serialEventRun+0x18>
        serialEvent();
   d47e0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d47e4:	4b06      	ldr	r3, [pc, #24]	; (d4800 <serialEventRun+0x34>)
   d47e6:	b143      	cbz	r3, d47fa <serialEventRun+0x2e>
   d47e8:	f000 f9ca 	bl	d4b80 <_Z22__fetch_global_Serial1v>
   d47ec:	6803      	ldr	r3, [r0, #0]
   d47ee:	691b      	ldr	r3, [r3, #16]
   d47f0:	4798      	blx	r3
   d47f2:	2800      	cmp	r0, #0
   d47f4:	dd01      	ble.n	d47fa <serialEventRun+0x2e>
        serialEvent1();
   d47f6:	f3af 8000 	nop.w
}
   d47fa:	bd08      	pop	{r3, pc}
	...

000d4804 <_post_loop>:
{
   d4804:	b508      	push	{r3, lr}
	serialEventRun();
   d4806:	f7ff ffe1 	bl	d47cc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d480a:	f7ff fd05 	bl	d4218 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d480e:	4b01      	ldr	r3, [pc, #4]	; (d4814 <_post_loop+0x10>)
   d4810:	6018      	str	r0, [r3, #0]
}
   d4812:	bd08      	pop	{r3, pc}
   d4814:	2003e7d4 	.word	0x2003e7d4

000d4818 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4818:	4802      	ldr	r0, [pc, #8]	; (d4824 <_Z33system_initialize_user_backup_ramv+0xc>)
   d481a:	4a03      	ldr	r2, [pc, #12]	; (d4828 <_Z33system_initialize_user_backup_ramv+0x10>)
   d481c:	4903      	ldr	r1, [pc, #12]	; (d482c <_Z33system_initialize_user_backup_ramv+0x14>)
   d481e:	1a12      	subs	r2, r2, r0
   d4820:	f000 bfac 	b.w	d577c <memcpy>
   d4824:	2003f400 	.word	0x2003f400
   d4828:	2003f404 	.word	0x2003f404
   d482c:	000d59b0 	.word	0x000d59b0

000d4830 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4830:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4832:	2300      	movs	r3, #0
   d4834:	9300      	str	r3, [sp, #0]
   d4836:	461a      	mov	r2, r3
   d4838:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d483c:	f7ff fe0e 	bl	d445c <system_ctrl_set_result>
}
   d4840:	b003      	add	sp, #12
   d4842:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4848 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4848:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d484a:	8843      	ldrh	r3, [r0, #2]
   d484c:	2b0a      	cmp	r3, #10
   d484e:	d008      	beq.n	d4862 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4850:	2b50      	cmp	r3, #80	; 0x50
   d4852:	d10b      	bne.n	d486c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4854:	4b09      	ldr	r3, [pc, #36]	; (d487c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4856:	681b      	ldr	r3, [r3, #0]
   d4858:	b14b      	cbz	r3, d486e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d485a:	b003      	add	sp, #12
   d485c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4860:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4862:	f7ff ffe5 	bl	d4830 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4866:	b003      	add	sp, #12
   d4868:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d486c:	2300      	movs	r3, #0
   d486e:	9300      	str	r3, [sp, #0]
   d4870:	461a      	mov	r2, r3
   d4872:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4876:	f7ff fdf1 	bl	d445c <system_ctrl_set_result>
}
   d487a:	e7f4      	b.n	d4866 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d487c:	2003e688 	.word	0x2003e688

000d4880 <module_user_init_hook>:
{
   d4880:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4882:	4c12      	ldr	r4, [pc, #72]	; (d48cc <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4884:	4812      	ldr	r0, [pc, #72]	; (d48d0 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4886:	4d13      	ldr	r5, [pc, #76]	; (d48d4 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4888:	2100      	movs	r1, #0
   d488a:	f7ff fe69 	bl	d4560 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d488e:	6823      	ldr	r3, [r4, #0]
   d4890:	42ab      	cmp	r3, r5
   d4892:	4b11      	ldr	r3, [pc, #68]	; (d48d8 <module_user_init_hook+0x58>)
   d4894:	bf0c      	ite	eq
   d4896:	2201      	moveq	r2, #1
   d4898:	2200      	movne	r2, #0
   d489a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d489c:	d002      	beq.n	d48a4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d489e:	f7ff ffbb 	bl	d4818 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d48a2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d48a4:	f7ff fcb0 	bl	d4208 <HAL_RNG_GetRandomNumber>
   d48a8:	4604      	mov	r4, r0
    srand(seed);
   d48aa:	f000 ff7d 	bl	d57a8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d48ae:	4b0b      	ldr	r3, [pc, #44]	; (d48dc <module_user_init_hook+0x5c>)
   d48b0:	b113      	cbz	r3, d48b8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d48b2:	4620      	mov	r0, r4
   d48b4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d48b8:	2100      	movs	r1, #0
   d48ba:	4808      	ldr	r0, [pc, #32]	; (d48dc <module_user_init_hook+0x5c>)
   d48bc:	f7ff fe38 	bl	d4530 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d48c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d48c4:	4806      	ldr	r0, [pc, #24]	; (d48e0 <module_user_init_hook+0x60>)
   d48c6:	2100      	movs	r1, #0
   d48c8:	f7ff bdbe 	b.w	d4448 <system_ctrl_set_app_request_handler>
   d48cc:	2003f400 	.word	0x2003f400
   d48d0:	000d47c1 	.word	0x000d47c1
   d48d4:	9a271c1e 	.word	0x9a271c1e
   d48d8:	2003e684 	.word	0x2003e684
   d48dc:	00000000 	.word	0x00000000
   d48e0:	000d4849 	.word	0x000d4849

000d48e4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d48e4:	4770      	bx	lr

000d48e6 <_ZN9IPAddressD0Ev>:
   d48e6:	b510      	push	{r4, lr}
   d48e8:	2118      	movs	r1, #24
   d48ea:	4604      	mov	r4, r0
   d48ec:	f000 fb45 	bl	d4f7a <_ZdlPvj>
   d48f0:	4620      	mov	r0, r4
   d48f2:	bd10      	pop	{r4, pc}

000d48f4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d48f4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d48f6:	7d03      	ldrb	r3, [r0, #20]
   d48f8:	2b06      	cmp	r3, #6
{
   d48fa:	b08d      	sub	sp, #52	; 0x34
   d48fc:	460e      	mov	r6, r1
   d48fe:	f100 0704 	add.w	r7, r0, #4
   d4902:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4906:	d012      	beq.n	d492e <_ZNK9IPAddress7printToER5Print+0x3a>
   d4908:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d490c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4910:	220a      	movs	r2, #10
   d4912:	4630      	mov	r0, r6
   d4914:	f7ff fee3 	bl	d46de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4918:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d491a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d491c:	d019      	beq.n	d4952 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d491e:	2c00      	cmp	r4, #0
   d4920:	d0f4      	beq.n	d490c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4922:	212e      	movs	r1, #46	; 0x2e
   d4924:	4630      	mov	r0, r6
   d4926:	f7ff fed7 	bl	d46d8 <_ZN5Print5printEc>
   d492a:	4404      	add	r4, r0
   d492c:	e7ee      	b.n	d490c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d492e:	232f      	movs	r3, #47	; 0x2f
   d4930:	466a      	mov	r2, sp
   d4932:	4639      	mov	r1, r7
   d4934:	200a      	movs	r0, #10
		buf[0] = 0;
   d4936:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d493a:	f7ff fc8d 	bl	d4258 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d493e:	4668      	mov	r0, sp
   d4940:	f000 ff56 	bl	d57f0 <strlen>
   d4944:	6833      	ldr	r3, [r6, #0]
   d4946:	4602      	mov	r2, r0
   d4948:	68db      	ldr	r3, [r3, #12]
   d494a:	4669      	mov	r1, sp
   d494c:	4630      	mov	r0, r6
   d494e:	4798      	blx	r3
   d4950:	4604      	mov	r4, r0
    }
    return n;
}
   d4952:	4620      	mov	r0, r4
   d4954:	b00d      	add	sp, #52	; 0x34
   d4956:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4958 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4958:	b510      	push	{r4, lr}
   d495a:	4b05      	ldr	r3, [pc, #20]	; (d4970 <_ZN9IPAddressC1Ev+0x18>)
   d495c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d495e:	2211      	movs	r2, #17
   d4960:	f840 3b04 	str.w	r3, [r0], #4
   d4964:	2100      	movs	r1, #0
   d4966:	f000 ff17 	bl	d5798 <memset>
}
   d496a:	4620      	mov	r0, r4
   d496c:	bd10      	pop	{r4, pc}
   d496e:	bf00      	nop
   d4970:	000d5878 	.word	0x000d5878

000d4974 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4974:	4603      	mov	r3, r0
   d4976:	4a07      	ldr	r2, [pc, #28]	; (d4994 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4978:	b510      	push	{r4, lr}
   d497a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d497e:	f101 0210 	add.w	r2, r1, #16
   d4982:	f851 4b04 	ldr.w	r4, [r1], #4
   d4986:	f843 4b04 	str.w	r4, [r3], #4
   d498a:	4291      	cmp	r1, r2
   d498c:	d1f9      	bne.n	d4982 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d498e:	780a      	ldrb	r2, [r1, #0]
   d4990:	701a      	strb	r2, [r3, #0]
}
   d4992:	bd10      	pop	{r4, pc}
   d4994:	000d5878 	.word	0x000d5878

000d4998 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4998:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d499a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d499e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d49a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d49a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d49aa:	2304      	movs	r3, #4
   d49ac:	6041      	str	r1, [r0, #4]
   d49ae:	7503      	strb	r3, [r0, #20]
}
   d49b0:	bd10      	pop	{r4, pc}
	...

000d49b4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d49b4:	b513      	push	{r0, r1, r4, lr}
   d49b6:	4b05      	ldr	r3, [pc, #20]	; (d49cc <_ZN9IPAddressC1EPKh+0x18>)
   d49b8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d49ba:	78cb      	ldrb	r3, [r1, #3]
   d49bc:	9300      	str	r3, [sp, #0]
   d49be:	788b      	ldrb	r3, [r1, #2]
   d49c0:	784a      	ldrb	r2, [r1, #1]
   d49c2:	7809      	ldrb	r1, [r1, #0]
   d49c4:	f7ff ffe8 	bl	d4998 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d49c8:	b002      	add	sp, #8
   d49ca:	bd10      	pop	{r4, pc}
   d49cc:	000d5878 	.word	0x000d5878

000d49d0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d49d0:	7441      	strb	r1, [r0, #17]
}
   d49d2:	4770      	bx	lr

000d49d4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d49d4:	4770      	bx	lr

000d49d6 <_ZN9USBSerial4readEv>:
{
   d49d6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d49d8:	2100      	movs	r1, #0
   d49da:	7c00      	ldrb	r0, [r0, #16]
   d49dc:	f7ff fce4 	bl	d43a8 <HAL_USB_USART_Receive_Data>
}
   d49e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d49e4:	bd08      	pop	{r3, pc}

000d49e6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d49e6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d49e8:	2101      	movs	r1, #1
   d49ea:	7c00      	ldrb	r0, [r0, #16]
   d49ec:	f7ff fcdc 	bl	d43a8 <HAL_USB_USART_Receive_Data>
}
   d49f0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d49f4:	bd08      	pop	{r3, pc}

000d49f6 <_ZN9USBSerial17availableForWriteEv>:
{
   d49f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d49f8:	7c00      	ldrb	r0, [r0, #16]
   d49fa:	f7ff fccd 	bl	d4398 <HAL_USB_USART_Available_Data_For_Write>
}
   d49fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4a02:	bd08      	pop	{r3, pc}

000d4a04 <_ZN9USBSerial9availableEv>:
{
   d4a04:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4a06:	7c00      	ldrb	r0, [r0, #16]
   d4a08:	f7ff fcbe 	bl	d4388 <HAL_USB_USART_Available_Data>
}
   d4a0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4a10:	bd08      	pop	{r3, pc}

000d4a12 <_ZN9USBSerial5writeEh>:
{
   d4a12:	b513      	push	{r0, r1, r4, lr}
   d4a14:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4a16:	7c00      	ldrb	r0, [r0, #16]
{
   d4a18:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4a1a:	f7ff fcbd 	bl	d4398 <HAL_USB_USART_Available_Data_For_Write>
   d4a1e:	2800      	cmp	r0, #0
   d4a20:	9901      	ldr	r1, [sp, #4]
   d4a22:	dc01      	bgt.n	d4a28 <_ZN9USBSerial5writeEh+0x16>
   d4a24:	7c60      	ldrb	r0, [r4, #17]
   d4a26:	b120      	cbz	r0, d4a32 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4a28:	7c20      	ldrb	r0, [r4, #16]
   d4a2a:	f7ff fcc5 	bl	d43b8 <HAL_USB_USART_Send_Data>
   d4a2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d4a32:	b002      	add	sp, #8
   d4a34:	bd10      	pop	{r4, pc}

000d4a36 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d4a36:	7c00      	ldrb	r0, [r0, #16]
   d4a38:	f7ff bcc6 	b.w	d43c8 <HAL_USB_USART_Flush_Data>

000d4a3c <_ZN9USBSerialD0Ev>:
   d4a3c:	b510      	push	{r4, lr}
   d4a3e:	2114      	movs	r1, #20
   d4a40:	4604      	mov	r4, r0
   d4a42:	f000 fa9a 	bl	d4f7a <_ZdlPvj>
   d4a46:	4620      	mov	r0, r4
   d4a48:	bd10      	pop	{r4, pc}
	...

000d4a4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4a4c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4a52:	4604      	mov	r4, r0
   d4a54:	4608      	mov	r0, r1
   d4a56:	2100      	movs	r1, #0
   d4a58:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4a5c:	4b04      	ldr	r3, [pc, #16]	; (d4a70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4a5e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d4a60:	2301      	movs	r3, #1
  _serial = serial;
   d4a62:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4a64:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d4a66:	4611      	mov	r1, r2
   d4a68:	f7ff fc86 	bl	d4378 <HAL_USB_USART_Init>
}
   d4a6c:	4620      	mov	r0, r4
   d4a6e:	bd10      	pop	{r4, pc}
   d4a70:	000d588c 	.word	0x000d588c

000d4a74 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4a74:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4a76:	2214      	movs	r2, #20
{
   d4a78:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4a7a:	2100      	movs	r1, #0
   d4a7c:	f000 fe8c 	bl	d5798 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4a80:	4620      	mov	r0, r4
   d4a82:	bd10      	pop	{r4, pc}

000d4a84 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4a84:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4a86:	4c10      	ldr	r4, [pc, #64]	; (d4ac8 <_Z16_fetch_usbserialv+0x44>)
{
   d4a88:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4a8a:	a803      	add	r0, sp, #12
   d4a8c:	f7ff fff2 	bl	d4a74 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4a90:	7821      	ldrb	r1, [r4, #0]
   d4a92:	f3bf 8f5b 	dmb	ish
   d4a96:	f011 0101 	ands.w	r1, r1, #1
   d4a9a:	d111      	bne.n	d4ac0 <_Z16_fetch_usbserialv+0x3c>
   d4a9c:	4620      	mov	r0, r4
   d4a9e:	9101      	str	r1, [sp, #4]
   d4aa0:	f7ff fafd 	bl	d409e <__cxa_guard_acquire>
   d4aa4:	9901      	ldr	r1, [sp, #4]
   d4aa6:	b158      	cbz	r0, d4ac0 <_Z16_fetch_usbserialv+0x3c>
   d4aa8:	aa03      	add	r2, sp, #12
   d4aaa:	4808      	ldr	r0, [pc, #32]	; (d4acc <_Z16_fetch_usbserialv+0x48>)
   d4aac:	f7ff ffce 	bl	d4a4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4ab0:	4620      	mov	r0, r4
   d4ab2:	f7ff faf9 	bl	d40a8 <__cxa_guard_release>
   d4ab6:	4a06      	ldr	r2, [pc, #24]	; (d4ad0 <_Z16_fetch_usbserialv+0x4c>)
   d4ab8:	4906      	ldr	r1, [pc, #24]	; (d4ad4 <_Z16_fetch_usbserialv+0x50>)
   d4aba:	4804      	ldr	r0, [pc, #16]	; (d4acc <_Z16_fetch_usbserialv+0x48>)
   d4abc:	f000 fa58 	bl	d4f70 <__aeabi_atexit>
	return _usbserial;
}
   d4ac0:	4802      	ldr	r0, [pc, #8]	; (d4acc <_Z16_fetch_usbserialv+0x48>)
   d4ac2:	b008      	add	sp, #32
   d4ac4:	bd10      	pop	{r4, pc}
   d4ac6:	bf00      	nop
   d4ac8:	2003e68c 	.word	0x2003e68c
   d4acc:	2003e690 	.word	0x2003e690
   d4ad0:	2003e630 	.word	0x2003e630
   d4ad4:	000d49d5 	.word	0x000d49d5

000d4ad8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d4ad8:	4770      	bx	lr

000d4ada <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4ada:	7441      	strb	r1, [r0, #17]
}
   d4adc:	4770      	bx	lr

000d4ade <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d4ade:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d4ae0:	7c00      	ldrb	r0, [r0, #16]
   d4ae2:	f7ff fbf9 	bl	d42d8 <hal_usart_available_data_for_write>
}
   d4ae6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4aea:	bd08      	pop	{r3, pc}

000d4aec <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4aec:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d4aee:	7c00      	ldrb	r0, [r0, #16]
   d4af0:	f7ff fbca 	bl	d4288 <hal_usart_available>
}
   d4af4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4af8:	bd08      	pop	{r3, pc}

000d4afa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4afa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d4afc:	7c00      	ldrb	r0, [r0, #16]
   d4afe:	f7ff fbd3 	bl	d42a8 <hal_usart_peek>
}
   d4b02:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4b06:	bd08      	pop	{r3, pc}

000d4b08 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4b08:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d4b0a:	7c00      	ldrb	r0, [r0, #16]
   d4b0c:	f7ff fbc4 	bl	d4298 <hal_usart_read>
}
   d4b10:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4b14:	bd08      	pop	{r3, pc}

000d4b16 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d4b16:	7c00      	ldrb	r0, [r0, #16]
   d4b18:	f7ff bbce 	b.w	d42b8 <hal_usart_flush>

000d4b1c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4b1e:	7c45      	ldrb	r5, [r0, #17]
{
   d4b20:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4b22:	b12d      	cbz	r5, d4b30 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d4b24:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4b26:	b003      	add	sp, #12
   d4b28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d4b2c:	f7ff bba4 	b.w	d4278 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4b30:	7c00      	ldrb	r0, [r0, #16]
   d4b32:	9101      	str	r1, [sp, #4]
   d4b34:	f7ff fbd0 	bl	d42d8 <hal_usart_available_data_for_write>
   d4b38:	2800      	cmp	r0, #0
   d4b3a:	9901      	ldr	r1, [sp, #4]
   d4b3c:	dcf2      	bgt.n	d4b24 <_ZN11USARTSerial5writeEh+0x8>
}
   d4b3e:	4628      	mov	r0, r5
   d4b40:	b003      	add	sp, #12
   d4b42:	bd30      	pop	{r4, r5, pc}

000d4b44 <_ZN11USARTSerialD0Ev>:
   d4b44:	b510      	push	{r4, lr}
   d4b46:	2114      	movs	r1, #20
   d4b48:	4604      	mov	r4, r0
   d4b4a:	f000 fa16 	bl	d4f7a <_ZdlPvj>
   d4b4e:	4620      	mov	r0, r4
   d4b50:	bd10      	pop	{r4, pc}
	...

000d4b54 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d4b54:	b510      	push	{r4, lr}
   d4b56:	f04f 0c00 	mov.w	ip, #0
   d4b5a:	4604      	mov	r4, r0
   d4b5c:	4608      	mov	r0, r1
   d4b5e:	4611      	mov	r1, r2
   d4b60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4b64:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d4b68:	4a04      	ldr	r2, [pc, #16]	; (d4b7c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d4b6a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d4b6c:	2201      	movs	r2, #1
  _serial = serial;
   d4b6e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4b70:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d4b72:	461a      	mov	r2, r3
   d4b74:	f7ff fb78 	bl	d4268 <hal_usart_init>
}
   d4b78:	4620      	mov	r0, r4
   d4b7a:	bd10      	pop	{r4, pc}
   d4b7c:	000d58bc 	.word	0x000d58bc

000d4b80 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4b80:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4b82:	4c0e      	ldr	r4, [pc, #56]	; (d4bbc <_Z22__fetch_global_Serial1v+0x3c>)
   d4b84:	7821      	ldrb	r1, [r4, #0]
   d4b86:	f3bf 8f5b 	dmb	ish
   d4b8a:	f011 0101 	ands.w	r1, r1, #1
   d4b8e:	d112      	bne.n	d4bb6 <_Z22__fetch_global_Serial1v+0x36>
   d4b90:	4620      	mov	r0, r4
   d4b92:	9101      	str	r1, [sp, #4]
   d4b94:	f7ff fa83 	bl	d409e <__cxa_guard_acquire>
   d4b98:	9901      	ldr	r1, [sp, #4]
   d4b9a:	b160      	cbz	r0, d4bb6 <_Z22__fetch_global_Serial1v+0x36>
   d4b9c:	4a08      	ldr	r2, [pc, #32]	; (d4bc0 <_Z22__fetch_global_Serial1v+0x40>)
   d4b9e:	4b09      	ldr	r3, [pc, #36]	; (d4bc4 <_Z22__fetch_global_Serial1v+0x44>)
   d4ba0:	4809      	ldr	r0, [pc, #36]	; (d4bc8 <_Z22__fetch_global_Serial1v+0x48>)
   d4ba2:	f7ff ffd7 	bl	d4b54 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d4ba6:	4620      	mov	r0, r4
   d4ba8:	f7ff fa7e 	bl	d40a8 <__cxa_guard_release>
   d4bac:	4a07      	ldr	r2, [pc, #28]	; (d4bcc <_Z22__fetch_global_Serial1v+0x4c>)
   d4bae:	4908      	ldr	r1, [pc, #32]	; (d4bd0 <_Z22__fetch_global_Serial1v+0x50>)
   d4bb0:	4805      	ldr	r0, [pc, #20]	; (d4bc8 <_Z22__fetch_global_Serial1v+0x48>)
   d4bb2:	f000 f9dd 	bl	d4f70 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4bb6:	4804      	ldr	r0, [pc, #16]	; (d4bc8 <_Z22__fetch_global_Serial1v+0x48>)
   d4bb8:	b002      	add	sp, #8
   d4bba:	bd10      	pop	{r4, pc}
   d4bbc:	2003e6a4 	.word	0x2003e6a4
   d4bc0:	2003e6a8 	.word	0x2003e6a8
   d4bc4:	2003e72c 	.word	0x2003e72c
   d4bc8:	2003e7b0 	.word	0x2003e7b0
   d4bcc:	2003e630 	.word	0x2003e630
   d4bd0:	000d4ad9 	.word	0x000d4ad9

000d4bd4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4bd4:	4770      	bx	lr

000d4bd6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4bd8:	4606      	mov	r6, r0
   d4bda:	4615      	mov	r5, r2
   d4bdc:	460c      	mov	r4, r1
   d4bde:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4be0:	42bc      	cmp	r4, r7
   d4be2:	d006      	beq.n	d4bf2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4be4:	6833      	ldr	r3, [r6, #0]
   d4be6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4bea:	689b      	ldr	r3, [r3, #8]
   d4bec:	4630      	mov	r0, r6
   d4bee:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4bf0:	e7f6      	b.n	d4be0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4bf2:	4628      	mov	r0, r5
   d4bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4bf6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4bf6:	7c00      	ldrb	r0, [r0, #16]
   d4bf8:	2200      	movs	r2, #0
   d4bfa:	f7ff bb75 	b.w	d42e8 <hal_i2c_write>

000d4bfe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4bfe:	7c00      	ldrb	r0, [r0, #16]
   d4c00:	2100      	movs	r1, #0
   d4c02:	f7ff bb79 	b.w	d42f8 <hal_i2c_available>

000d4c06 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4c06:	7c00      	ldrb	r0, [r0, #16]
   d4c08:	2100      	movs	r1, #0
   d4c0a:	f7ff bb7d 	b.w	d4308 <hal_i2c_read>

000d4c0e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4c0e:	7c00      	ldrb	r0, [r0, #16]
   d4c10:	2100      	movs	r1, #0
   d4c12:	f7ff bb81 	b.w	d4318 <hal_i2c_peek>

000d4c16 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4c16:	7c00      	ldrb	r0, [r0, #16]
   d4c18:	2100      	movs	r1, #0
   d4c1a:	f7ff bb85 	b.w	d4328 <hal_i2c_flush>

000d4c1e <_ZN7TwoWireD0Ev>:
   d4c1e:	b510      	push	{r4, lr}
   d4c20:	2114      	movs	r1, #20
   d4c22:	4604      	mov	r4, r0
   d4c24:	f000 f9a9 	bl	d4f7a <_ZdlPvj>
   d4c28:	4620      	mov	r0, r4
   d4c2a:	bd10      	pop	{r4, pc}

000d4c2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4c2c:	b510      	push	{r4, lr}
   d4c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4c32:	4604      	mov	r4, r0
   d4c34:	4608      	mov	r0, r1
   d4c36:	2100      	movs	r1, #0
   d4c38:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4c3c:	4b03      	ldr	r3, [pc, #12]	; (d4c4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4c3e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4c40:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4c42:	4611      	mov	r1, r2
   d4c44:	f7ff fb80 	bl	d4348 <hal_i2c_init>
}
   d4c48:	4620      	mov	r0, r4
   d4c4a:	bd10      	pop	{r4, pc}
   d4c4c:	000d58ec 	.word	0x000d58ec

000d4c50 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4c50:	2200      	movs	r2, #0
   d4c52:	6840      	ldr	r0, [r0, #4]
   d4c54:	4611      	mov	r1, r2
   d4c56:	f7ff bc23 	b.w	d44a0 <network_ready>

000d4c5a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c5a:	2200      	movs	r2, #0
   d4c5c:	6840      	ldr	r0, [r0, #4]
   d4c5e:	4611      	mov	r1, r2
   d4c60:	f7ff bc3e 	b.w	d44e0 <network_listening>

000d4c64 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4c64:	2200      	movs	r2, #0
   d4c66:	6840      	ldr	r0, [r0, #4]
   d4c68:	4611      	mov	r1, r2
   d4c6a:	f7ff bc49 	b.w	d4500 <network_get_listen_timeout>

000d4c6e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4c6e:	6840      	ldr	r0, [r0, #4]
   d4c70:	2200      	movs	r2, #0
   d4c72:	f7ff bc3d 	b.w	d44f0 <network_set_listen_timeout>

000d4c76 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4c76:	6840      	ldr	r0, [r0, #4]
   d4c78:	2200      	movs	r2, #0
   d4c7a:	f081 0101 	eor.w	r1, r1, #1
   d4c7e:	f7ff bc27 	b.w	d44d0 <network_listen>

000d4c82 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4c82:	2300      	movs	r3, #0
   d4c84:	6840      	ldr	r0, [r0, #4]
   d4c86:	461a      	mov	r2, r3
   d4c88:	4619      	mov	r1, r3
   d4c8a:	f7ff bc19 	b.w	d44c0 <network_off>

000d4c8e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4c8e:	2200      	movs	r2, #0
   d4c90:	6840      	ldr	r0, [r0, #4]
   d4c92:	4611      	mov	r1, r2
   d4c94:	f7ff bbf4 	b.w	d4480 <network_connecting>

000d4c98 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c98:	6840      	ldr	r0, [r0, #4]
   d4c9a:	2200      	movs	r2, #0
   d4c9c:	2102      	movs	r1, #2
   d4c9e:	f7ff bbf7 	b.w	d4490 <network_disconnect>

000d4ca2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4ca2:	2300      	movs	r3, #0
   d4ca4:	6840      	ldr	r0, [r0, #4]
   d4ca6:	461a      	mov	r2, r3
   d4ca8:	f7ff bbe2 	b.w	d4470 <network_connect>

000d4cac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4cac:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4cae:	2204      	movs	r2, #4
   d4cb0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4cb2:	4a02      	ldr	r2, [pc, #8]	; (d4cbc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4cb4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d4cb6:	4770      	bx	lr
   d4cb8:	2003e7c4 	.word	0x2003e7c4
   d4cbc:	000d5914 	.word	0x000d5914

000d4cc0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4cc0:	2300      	movs	r3, #0
   d4cc2:	6840      	ldr	r0, [r0, #4]
   d4cc4:	461a      	mov	r2, r3
   d4cc6:	f7ff bbd3 	b.w	d4470 <network_connect>

000d4cca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4cca:	6840      	ldr	r0, [r0, #4]
   d4ccc:	2200      	movs	r2, #0
   d4cce:	2102      	movs	r1, #2
   d4cd0:	f7ff bbde 	b.w	d4490 <network_disconnect>

000d4cd4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4cd4:	2200      	movs	r2, #0
   d4cd6:	6840      	ldr	r0, [r0, #4]
   d4cd8:	4611      	mov	r1, r2
   d4cda:	f7ff bbd1 	b.w	d4480 <network_connecting>

000d4cde <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4cde:	2200      	movs	r2, #0
   d4ce0:	6840      	ldr	r0, [r0, #4]
   d4ce2:	4611      	mov	r1, r2
   d4ce4:	f7ff bbdc 	b.w	d44a0 <network_ready>

000d4ce8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4ce8:	2300      	movs	r3, #0
   d4cea:	6840      	ldr	r0, [r0, #4]
   d4cec:	461a      	mov	r2, r3
   d4cee:	4619      	mov	r1, r3
   d4cf0:	f7ff bbde 	b.w	d44b0 <network_on>

000d4cf4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4cf4:	2300      	movs	r3, #0
   d4cf6:	6840      	ldr	r0, [r0, #4]
   d4cf8:	461a      	mov	r2, r3
   d4cfa:	4619      	mov	r1, r3
   d4cfc:	f7ff bbe0 	b.w	d44c0 <network_off>

000d4d00 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d4d00:	6840      	ldr	r0, [r0, #4]
   d4d02:	2100      	movs	r1, #0
   d4d04:	f7ff bc04 	b.w	d4510 <network_is_on>

000d4d08 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d4d08:	6840      	ldr	r0, [r0, #4]
   d4d0a:	2100      	movs	r1, #0
   d4d0c:	f7ff bc08 	b.w	d4520 <network_is_off>

000d4d10 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4d10:	6840      	ldr	r0, [r0, #4]
   d4d12:	2200      	movs	r2, #0
   d4d14:	f081 0101 	eor.w	r1, r1, #1
   d4d18:	f7ff bbda 	b.w	d44d0 <network_listen>

000d4d1c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4d1c:	6840      	ldr	r0, [r0, #4]
   d4d1e:	2200      	movs	r2, #0
   d4d20:	f7ff bbe6 	b.w	d44f0 <network_set_listen_timeout>

000d4d24 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4d24:	2200      	movs	r2, #0
   d4d26:	6840      	ldr	r0, [r0, #4]
   d4d28:	4611      	mov	r1, r2
   d4d2a:	f7ff bbe9 	b.w	d4500 <network_get_listen_timeout>

000d4d2e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4d2e:	2200      	movs	r2, #0
   d4d30:	6840      	ldr	r0, [r0, #4]
   d4d32:	4611      	mov	r1, r2
   d4d34:	f7ff bbd4 	b.w	d44e0 <network_listening>

000d4d38 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4d3c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4d3e:	b095      	sub	sp, #84	; 0x54
   d4d40:	4616      	mov	r6, r2
   d4d42:	460d      	mov	r5, r1
   d4d44:	4607      	mov	r7, r0
    IPAddress addr;
   d4d46:	f7ff fe07 	bl	d4958 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4d4a:	4621      	mov	r1, r4
   d4d4c:	2218      	movs	r2, #24
   d4d4e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4d50:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4d52:	f000 fd21 	bl	d5798 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4d56:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4d58:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4d5c:	4621      	mov	r1, r4
   d4d5e:	466b      	mov	r3, sp
   d4d60:	aa0c      	add	r2, sp, #48	; 0x30
   d4d62:	4630      	mov	r0, r6
   d4d64:	f7ff fa30 	bl	d41c8 <netdb_getaddrinfo>
    if (!r) {
   d4d68:	4604      	mov	r4, r0
   d4d6a:	2800      	cmp	r0, #0
   d4d6c:	d14c      	bne.n	d4e08 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4d6e:	4602      	mov	r2, r0
   d4d70:	2101      	movs	r1, #1
   d4d72:	6868      	ldr	r0, [r5, #4]
   d4d74:	f7ff fb94 	bl	d44a0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d78:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4d7a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d7c:	4622      	mov	r2, r4
   d4d7e:	6868      	ldr	r0, [r5, #4]
   d4d80:	f7ff fb8e 	bl	d44a0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4d84:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d86:	4681      	mov	r9, r0
        bool ok = false;
   d4d88:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4d8a:	2e00      	cmp	r6, #0
   d4d8c:	d03c      	beq.n	d4e08 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d4d8e:	2900      	cmp	r1, #0
   d4d90:	d13a      	bne.n	d4e08 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4d92:	6873      	ldr	r3, [r6, #4]
   d4d94:	2b02      	cmp	r3, #2
   d4d96:	d003      	beq.n	d4da0 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4d98:	2b0a      	cmp	r3, #10
   d4d9a:	d011      	beq.n	d4dc0 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4d9c:	69f6      	ldr	r6, [r6, #28]
   d4d9e:	e7f4      	b.n	d4d8a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4da0:	f1b8 0f00 	cmp.w	r8, #0
   d4da4:	d00a      	beq.n	d4dbc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4da6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d4da8:	a806      	add	r0, sp, #24
   d4daa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d4dac:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d4dae:	f7ff fe01 	bl	d49b4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d4db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4db4:	1d3c      	adds	r4, r7, #4
   d4db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4db8:	682b      	ldr	r3, [r5, #0]
   d4dba:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d4dbc:	4641      	mov	r1, r8
   d4dbe:	e7ed      	b.n	d4d9c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4dc0:	f1b9 0f00 	cmp.w	r9, #0
   d4dc4:	d101      	bne.n	d4dca <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4dc6:	4649      	mov	r1, r9
   d4dc8:	e7e8      	b.n	d4d9c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4dca:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4dcc:	2210      	movs	r2, #16
   d4dce:	a801      	add	r0, sp, #4
   d4dd0:	f000 fce2 	bl	d5798 <memset>
                    a.v = 6;
   d4dd4:	2306      	movs	r3, #6
   d4dd6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4dda:	ad01      	add	r5, sp, #4
   d4ddc:	f104 0308 	add.w	r3, r4, #8
   d4de0:	3418      	adds	r4, #24
   d4de2:	6818      	ldr	r0, [r3, #0]
   d4de4:	6859      	ldr	r1, [r3, #4]
   d4de6:	462a      	mov	r2, r5
   d4de8:	c203      	stmia	r2!, {r0, r1}
   d4dea:	3308      	adds	r3, #8
   d4dec:	42a3      	cmp	r3, r4
   d4dee:	4615      	mov	r5, r2
   d4df0:	d1f7      	bne.n	d4de2 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d4df2:	a901      	add	r1, sp, #4
   d4df4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d4df6:	ad07      	add	r5, sp, #28
   d4df8:	f7ff fdbc 	bl	d4974 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4dfe:	1d3c      	adds	r4, r7, #4
   d4e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e02:	682b      	ldr	r3, [r5, #0]
   d4e04:	7023      	strb	r3, [r4, #0]
   d4e06:	e7de      	b.n	d4dc6 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4e08:	9800      	ldr	r0, [sp, #0]
   d4e0a:	f7ff f9d5 	bl	d41b8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4e0e:	4638      	mov	r0, r7
   d4e10:	b015      	add	sp, #84	; 0x54
   d4e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4e18 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4e18:	4b02      	ldr	r3, [pc, #8]	; (d4e24 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4e1a:	4a03      	ldr	r2, [pc, #12]	; (d4e28 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4e1c:	601a      	str	r2, [r3, #0]
   d4e1e:	2200      	movs	r2, #0
   d4e20:	605a      	str	r2, [r3, #4]

} // spark
   d4e22:	4770      	bx	lr
   d4e24:	2003e7cc 	.word	0x2003e7cc
   d4e28:	000d5950 	.word	0x000d5950

000d4e2c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d4e2c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d4e2e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d4e30:	d902      	bls.n	d4e38 <pinAvailable+0xc>
    return false;
   d4e32:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d4e34:	b002      	add	sp, #8
   d4e36:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d4e38:	f1a0 030b 	sub.w	r3, r0, #11
   d4e3c:	2b02      	cmp	r3, #2
   d4e3e:	d81a      	bhi.n	d4e76 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4e40:	4c17      	ldr	r4, [pc, #92]	; (d4ea0 <pinAvailable+0x74>)
   d4e42:	7821      	ldrb	r1, [r4, #0]
   d4e44:	f3bf 8f5b 	dmb	ish
   d4e48:	f011 0101 	ands.w	r1, r1, #1
   d4e4c:	d10b      	bne.n	d4e66 <pinAvailable+0x3a>
   d4e4e:	4620      	mov	r0, r4
   d4e50:	9101      	str	r1, [sp, #4]
   d4e52:	f7ff f924 	bl	d409e <__cxa_guard_acquire>
   d4e56:	9901      	ldr	r1, [sp, #4]
   d4e58:	b128      	cbz	r0, d4e66 <pinAvailable+0x3a>
   d4e5a:	4812      	ldr	r0, [pc, #72]	; (d4ea4 <pinAvailable+0x78>)
   d4e5c:	f7ff fbc6 	bl	d45ec <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4e60:	4620      	mov	r0, r4
   d4e62:	f7ff f921 	bl	d40a8 <__cxa_guard_release>
   d4e66:	4b0f      	ldr	r3, [pc, #60]	; (d4ea4 <pinAvailable+0x78>)
   d4e68:	7818      	ldrb	r0, [r3, #0]
   d4e6a:	f7ff fa7d 	bl	d4368 <hal_spi_is_enabled>
   d4e6e:	2800      	cmp	r0, #0
   d4e70:	d1df      	bne.n	d4e32 <pinAvailable+0x6>
  return true; // 'pin' is available
   d4e72:	2001      	movs	r0, #1
   d4e74:	e7de      	b.n	d4e34 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d4e76:	2801      	cmp	r0, #1
   d4e78:	d809      	bhi.n	d4e8e <pinAvailable+0x62>
   d4e7a:	f000 f851 	bl	d4f20 <_Z19__fetch_global_Wirev>
   d4e7e:	2100      	movs	r1, #0
   d4e80:	7c00      	ldrb	r0, [r0, #16]
   d4e82:	f7ff fa59 	bl	d4338 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d4e86:	f080 0001 	eor.w	r0, r0, #1
   d4e8a:	b2c0      	uxtb	r0, r0
   d4e8c:	e7d2      	b.n	d4e34 <pinAvailable+0x8>
   d4e8e:	3809      	subs	r0, #9
   d4e90:	2801      	cmp	r0, #1
   d4e92:	d8ee      	bhi.n	d4e72 <pinAvailable+0x46>
   d4e94:	f7ff fe74 	bl	d4b80 <_Z22__fetch_global_Serial1v>
   d4e98:	7c00      	ldrb	r0, [r0, #16]
   d4e9a:	f7ff fa15 	bl	d42c8 <hal_usart_is_enabled>
   d4e9e:	e7f2      	b.n	d4e86 <pinAvailable+0x5a>
   d4ea0:	2003e644 	.word	0x2003e644
   d4ea4:	2003e648 	.word	0x2003e648

000d4ea8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4ea8:	2823      	cmp	r0, #35	; 0x23
{
   d4eaa:	b538      	push	{r3, r4, r5, lr}
   d4eac:	4604      	mov	r4, r0
   d4eae:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4eb0:	d80a      	bhi.n	d4ec8 <pinMode+0x20>
   d4eb2:	29ff      	cmp	r1, #255	; 0xff
   d4eb4:	d008      	beq.n	d4ec8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d4eb6:	f7ff ffb9 	bl	d4e2c <pinAvailable>
   d4eba:	b128      	cbz	r0, d4ec8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d4ebc:	4629      	mov	r1, r5
   d4ebe:	4620      	mov	r0, r4
}
   d4ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d4ec4:	f7ff b988 	b.w	d41d8 <HAL_Pin_Mode>
}
   d4ec8:	bd38      	pop	{r3, r4, r5, pc}

000d4eca <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d4eca:	b510      	push	{r4, lr}
   d4ecc:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d4ece:	f7ff f98b 	bl	d41e8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d4ed2:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d4ed4:	b2db      	uxtb	r3, r3
   d4ed6:	2b01      	cmp	r3, #1
   d4ed8:	d908      	bls.n	d4eec <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d4eda:	4620      	mov	r0, r4
   d4edc:	f7ff ffa6 	bl	d4e2c <pinAvailable>
   d4ee0:	b120      	cbz	r0, d4eec <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d4ee2:	4620      	mov	r0, r4
}
   d4ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d4ee8:	f7ff b986 	b.w	d41f8 <HAL_GPIO_Read>
}
   d4eec:	2000      	movs	r0, #0
   d4eee:	bd10      	pop	{r4, pc}

000d4ef0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d4ef0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d4ef2:	2300      	movs	r3, #0
   d4ef4:	2520      	movs	r5, #32
   d4ef6:	8043      	strh	r3, [r0, #2]
   d4ef8:	2314      	movs	r3, #20
{
   d4efa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d4efc:	8003      	strh	r3, [r0, #0]
   d4efe:	6085      	str	r5, [r0, #8]
   d4f00:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4f02:	4906      	ldr	r1, [pc, #24]	; (d4f1c <_Z17acquireWireBufferv+0x2c>)
   d4f04:	4628      	mov	r0, r5
   d4f06:	f000 f83a 	bl	d4f7e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4f0a:	4904      	ldr	r1, [pc, #16]	; (d4f1c <_Z17acquireWireBufferv+0x2c>)
	};
   d4f0c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4f0e:	4628      	mov	r0, r5
   d4f10:	f000 f835 	bl	d4f7e <_ZnajRKSt9nothrow_t>
	};
   d4f14:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d4f16:	4620      	mov	r0, r4
   d4f18:	bd38      	pop	{r3, r4, r5, pc}
   d4f1a:	bf00      	nop
   d4f1c:	000d5984 	.word	0x000d5984

000d4f20 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d4f20:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4f22:	4d0f      	ldr	r5, [pc, #60]	; (d4f60 <_Z19__fetch_global_Wirev+0x40>)
   d4f24:	7829      	ldrb	r1, [r5, #0]
   d4f26:	f3bf 8f5b 	dmb	ish
   d4f2a:	f011 0401 	ands.w	r4, r1, #1
{
   d4f2e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4f30:	d113      	bne.n	d4f5a <_Z19__fetch_global_Wirev+0x3a>
   d4f32:	4628      	mov	r0, r5
   d4f34:	f7ff f8b3 	bl	d409e <__cxa_guard_acquire>
   d4f38:	b178      	cbz	r0, d4f5a <_Z19__fetch_global_Wirev+0x3a>
   d4f3a:	a801      	add	r0, sp, #4
   d4f3c:	f7ff ffd8 	bl	d4ef0 <_Z17acquireWireBufferv>
   d4f40:	aa01      	add	r2, sp, #4
   d4f42:	4621      	mov	r1, r4
   d4f44:	4807      	ldr	r0, [pc, #28]	; (d4f64 <_Z19__fetch_global_Wirev+0x44>)
   d4f46:	f7ff fe71 	bl	d4c2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d4f4a:	4628      	mov	r0, r5
   d4f4c:	f7ff f8ac 	bl	d40a8 <__cxa_guard_release>
   d4f50:	4a05      	ldr	r2, [pc, #20]	; (d4f68 <_Z19__fetch_global_Wirev+0x48>)
   d4f52:	4906      	ldr	r1, [pc, #24]	; (d4f6c <_Z19__fetch_global_Wirev+0x4c>)
   d4f54:	4803      	ldr	r0, [pc, #12]	; (d4f64 <_Z19__fetch_global_Wirev+0x44>)
   d4f56:	f000 f80b 	bl	d4f70 <__aeabi_atexit>
	return wire;
}
   d4f5a:	4802      	ldr	r0, [pc, #8]	; (d4f64 <_Z19__fetch_global_Wirev+0x44>)
   d4f5c:	b007      	add	sp, #28
   d4f5e:	bd30      	pop	{r4, r5, pc}
   d4f60:	2003e7d8 	.word	0x2003e7d8
   d4f64:	2003e7dc 	.word	0x2003e7dc
   d4f68:	2003e630 	.word	0x2003e630
   d4f6c:	000d4bd5 	.word	0x000d4bd5

000d4f70 <__aeabi_atexit>:
   d4f70:	460b      	mov	r3, r1
   d4f72:	4601      	mov	r1, r0
   d4f74:	4618      	mov	r0, r3
   d4f76:	f000 bbf3 	b.w	d5760 <__cxa_atexit>

000d4f7a <_ZdlPvj>:
   d4f7a:	f7ff b88e 	b.w	d409a <_ZdlPv>

000d4f7e <_ZnajRKSt9nothrow_t>:
   d4f7e:	f7ff b88a 	b.w	d4096 <_Znaj>
	...

000d4f84 <__aeabi_drsub>:
   d4f84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d4f88:	e002      	b.n	d4f90 <__adddf3>
   d4f8a:	bf00      	nop

000d4f8c <__aeabi_dsub>:
   d4f8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d4f90 <__adddf3>:
   d4f90:	b530      	push	{r4, r5, lr}
   d4f92:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d4f96:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d4f9a:	ea94 0f05 	teq	r4, r5
   d4f9e:	bf08      	it	eq
   d4fa0:	ea90 0f02 	teqeq	r0, r2
   d4fa4:	bf1f      	itttt	ne
   d4fa6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d4faa:	ea55 0c02 	orrsne.w	ip, r5, r2
   d4fae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d4fb2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d4fb6:	f000 80e2 	beq.w	d517e <__adddf3+0x1ee>
   d4fba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d4fbe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d4fc2:	bfb8      	it	lt
   d4fc4:	426d      	neglt	r5, r5
   d4fc6:	dd0c      	ble.n	d4fe2 <__adddf3+0x52>
   d4fc8:	442c      	add	r4, r5
   d4fca:	ea80 0202 	eor.w	r2, r0, r2
   d4fce:	ea81 0303 	eor.w	r3, r1, r3
   d4fd2:	ea82 0000 	eor.w	r0, r2, r0
   d4fd6:	ea83 0101 	eor.w	r1, r3, r1
   d4fda:	ea80 0202 	eor.w	r2, r0, r2
   d4fde:	ea81 0303 	eor.w	r3, r1, r3
   d4fe2:	2d36      	cmp	r5, #54	; 0x36
   d4fe4:	bf88      	it	hi
   d4fe6:	bd30      	pophi	{r4, r5, pc}
   d4fe8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d4fec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d4ff0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d4ff4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d4ff8:	d002      	beq.n	d5000 <__adddf3+0x70>
   d4ffa:	4240      	negs	r0, r0
   d4ffc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5000:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5004:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5008:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d500c:	d002      	beq.n	d5014 <__adddf3+0x84>
   d500e:	4252      	negs	r2, r2
   d5010:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5014:	ea94 0f05 	teq	r4, r5
   d5018:	f000 80a7 	beq.w	d516a <__adddf3+0x1da>
   d501c:	f1a4 0401 	sub.w	r4, r4, #1
   d5020:	f1d5 0e20 	rsbs	lr, r5, #32
   d5024:	db0d      	blt.n	d5042 <__adddf3+0xb2>
   d5026:	fa02 fc0e 	lsl.w	ip, r2, lr
   d502a:	fa22 f205 	lsr.w	r2, r2, r5
   d502e:	1880      	adds	r0, r0, r2
   d5030:	f141 0100 	adc.w	r1, r1, #0
   d5034:	fa03 f20e 	lsl.w	r2, r3, lr
   d5038:	1880      	adds	r0, r0, r2
   d503a:	fa43 f305 	asr.w	r3, r3, r5
   d503e:	4159      	adcs	r1, r3
   d5040:	e00e      	b.n	d5060 <__adddf3+0xd0>
   d5042:	f1a5 0520 	sub.w	r5, r5, #32
   d5046:	f10e 0e20 	add.w	lr, lr, #32
   d504a:	2a01      	cmp	r2, #1
   d504c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5050:	bf28      	it	cs
   d5052:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5056:	fa43 f305 	asr.w	r3, r3, r5
   d505a:	18c0      	adds	r0, r0, r3
   d505c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5060:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5064:	d507      	bpl.n	d5076 <__adddf3+0xe6>
   d5066:	f04f 0e00 	mov.w	lr, #0
   d506a:	f1dc 0c00 	rsbs	ip, ip, #0
   d506e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5072:	eb6e 0101 	sbc.w	r1, lr, r1
   d5076:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d507a:	d31b      	bcc.n	d50b4 <__adddf3+0x124>
   d507c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5080:	d30c      	bcc.n	d509c <__adddf3+0x10c>
   d5082:	0849      	lsrs	r1, r1, #1
   d5084:	ea5f 0030 	movs.w	r0, r0, rrx
   d5088:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d508c:	f104 0401 	add.w	r4, r4, #1
   d5090:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5094:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5098:	f080 809a 	bcs.w	d51d0 <__adddf3+0x240>
   d509c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d50a0:	bf08      	it	eq
   d50a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d50a6:	f150 0000 	adcs.w	r0, r0, #0
   d50aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d50ae:	ea41 0105 	orr.w	r1, r1, r5
   d50b2:	bd30      	pop	{r4, r5, pc}
   d50b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d50b8:	4140      	adcs	r0, r0
   d50ba:	eb41 0101 	adc.w	r1, r1, r1
   d50be:	3c01      	subs	r4, #1
   d50c0:	bf28      	it	cs
   d50c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d50c6:	d2e9      	bcs.n	d509c <__adddf3+0x10c>
   d50c8:	f091 0f00 	teq	r1, #0
   d50cc:	bf04      	itt	eq
   d50ce:	4601      	moveq	r1, r0
   d50d0:	2000      	moveq	r0, #0
   d50d2:	fab1 f381 	clz	r3, r1
   d50d6:	bf08      	it	eq
   d50d8:	3320      	addeq	r3, #32
   d50da:	f1a3 030b 	sub.w	r3, r3, #11
   d50de:	f1b3 0220 	subs.w	r2, r3, #32
   d50e2:	da0c      	bge.n	d50fe <__adddf3+0x16e>
   d50e4:	320c      	adds	r2, #12
   d50e6:	dd08      	ble.n	d50fa <__adddf3+0x16a>
   d50e8:	f102 0c14 	add.w	ip, r2, #20
   d50ec:	f1c2 020c 	rsb	r2, r2, #12
   d50f0:	fa01 f00c 	lsl.w	r0, r1, ip
   d50f4:	fa21 f102 	lsr.w	r1, r1, r2
   d50f8:	e00c      	b.n	d5114 <__adddf3+0x184>
   d50fa:	f102 0214 	add.w	r2, r2, #20
   d50fe:	bfd8      	it	le
   d5100:	f1c2 0c20 	rsble	ip, r2, #32
   d5104:	fa01 f102 	lsl.w	r1, r1, r2
   d5108:	fa20 fc0c 	lsr.w	ip, r0, ip
   d510c:	bfdc      	itt	le
   d510e:	ea41 010c 	orrle.w	r1, r1, ip
   d5112:	4090      	lslle	r0, r2
   d5114:	1ae4      	subs	r4, r4, r3
   d5116:	bfa2      	ittt	ge
   d5118:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d511c:	4329      	orrge	r1, r5
   d511e:	bd30      	popge	{r4, r5, pc}
   d5120:	ea6f 0404 	mvn.w	r4, r4
   d5124:	3c1f      	subs	r4, #31
   d5126:	da1c      	bge.n	d5162 <__adddf3+0x1d2>
   d5128:	340c      	adds	r4, #12
   d512a:	dc0e      	bgt.n	d514a <__adddf3+0x1ba>
   d512c:	f104 0414 	add.w	r4, r4, #20
   d5130:	f1c4 0220 	rsb	r2, r4, #32
   d5134:	fa20 f004 	lsr.w	r0, r0, r4
   d5138:	fa01 f302 	lsl.w	r3, r1, r2
   d513c:	ea40 0003 	orr.w	r0, r0, r3
   d5140:	fa21 f304 	lsr.w	r3, r1, r4
   d5144:	ea45 0103 	orr.w	r1, r5, r3
   d5148:	bd30      	pop	{r4, r5, pc}
   d514a:	f1c4 040c 	rsb	r4, r4, #12
   d514e:	f1c4 0220 	rsb	r2, r4, #32
   d5152:	fa20 f002 	lsr.w	r0, r0, r2
   d5156:	fa01 f304 	lsl.w	r3, r1, r4
   d515a:	ea40 0003 	orr.w	r0, r0, r3
   d515e:	4629      	mov	r1, r5
   d5160:	bd30      	pop	{r4, r5, pc}
   d5162:	fa21 f004 	lsr.w	r0, r1, r4
   d5166:	4629      	mov	r1, r5
   d5168:	bd30      	pop	{r4, r5, pc}
   d516a:	f094 0f00 	teq	r4, #0
   d516e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5172:	bf06      	itte	eq
   d5174:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5178:	3401      	addeq	r4, #1
   d517a:	3d01      	subne	r5, #1
   d517c:	e74e      	b.n	d501c <__adddf3+0x8c>
   d517e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5182:	bf18      	it	ne
   d5184:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5188:	d029      	beq.n	d51de <__adddf3+0x24e>
   d518a:	ea94 0f05 	teq	r4, r5
   d518e:	bf08      	it	eq
   d5190:	ea90 0f02 	teqeq	r0, r2
   d5194:	d005      	beq.n	d51a2 <__adddf3+0x212>
   d5196:	ea54 0c00 	orrs.w	ip, r4, r0
   d519a:	bf04      	itt	eq
   d519c:	4619      	moveq	r1, r3
   d519e:	4610      	moveq	r0, r2
   d51a0:	bd30      	pop	{r4, r5, pc}
   d51a2:	ea91 0f03 	teq	r1, r3
   d51a6:	bf1e      	ittt	ne
   d51a8:	2100      	movne	r1, #0
   d51aa:	2000      	movne	r0, #0
   d51ac:	bd30      	popne	{r4, r5, pc}
   d51ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d51b2:	d105      	bne.n	d51c0 <__adddf3+0x230>
   d51b4:	0040      	lsls	r0, r0, #1
   d51b6:	4149      	adcs	r1, r1
   d51b8:	bf28      	it	cs
   d51ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d51be:	bd30      	pop	{r4, r5, pc}
   d51c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d51c4:	bf3c      	itt	cc
   d51c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d51ca:	bd30      	popcc	{r4, r5, pc}
   d51cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d51d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d51d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d51d8:	f04f 0000 	mov.w	r0, #0
   d51dc:	bd30      	pop	{r4, r5, pc}
   d51de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d51e2:	bf1a      	itte	ne
   d51e4:	4619      	movne	r1, r3
   d51e6:	4610      	movne	r0, r2
   d51e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d51ec:	bf1c      	itt	ne
   d51ee:	460b      	movne	r3, r1
   d51f0:	4602      	movne	r2, r0
   d51f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d51f6:	bf06      	itte	eq
   d51f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d51fc:	ea91 0f03 	teqeq	r1, r3
   d5200:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5204:	bd30      	pop	{r4, r5, pc}
   d5206:	bf00      	nop

000d5208 <__aeabi_ui2d>:
   d5208:	f090 0f00 	teq	r0, #0
   d520c:	bf04      	itt	eq
   d520e:	2100      	moveq	r1, #0
   d5210:	4770      	bxeq	lr
   d5212:	b530      	push	{r4, r5, lr}
   d5214:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5218:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d521c:	f04f 0500 	mov.w	r5, #0
   d5220:	f04f 0100 	mov.w	r1, #0
   d5224:	e750      	b.n	d50c8 <__adddf3+0x138>
   d5226:	bf00      	nop

000d5228 <__aeabi_i2d>:
   d5228:	f090 0f00 	teq	r0, #0
   d522c:	bf04      	itt	eq
   d522e:	2100      	moveq	r1, #0
   d5230:	4770      	bxeq	lr
   d5232:	b530      	push	{r4, r5, lr}
   d5234:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5238:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d523c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5240:	bf48      	it	mi
   d5242:	4240      	negmi	r0, r0
   d5244:	f04f 0100 	mov.w	r1, #0
   d5248:	e73e      	b.n	d50c8 <__adddf3+0x138>
   d524a:	bf00      	nop

000d524c <__aeabi_f2d>:
   d524c:	0042      	lsls	r2, r0, #1
   d524e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5252:	ea4f 0131 	mov.w	r1, r1, rrx
   d5256:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d525a:	bf1f      	itttt	ne
   d525c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5260:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5264:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5268:	4770      	bxne	lr
   d526a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d526e:	bf08      	it	eq
   d5270:	4770      	bxeq	lr
   d5272:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5276:	bf04      	itt	eq
   d5278:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d527c:	4770      	bxeq	lr
   d527e:	b530      	push	{r4, r5, lr}
   d5280:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5284:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5288:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d528c:	e71c      	b.n	d50c8 <__adddf3+0x138>
   d528e:	bf00      	nop

000d5290 <__aeabi_ul2d>:
   d5290:	ea50 0201 	orrs.w	r2, r0, r1
   d5294:	bf08      	it	eq
   d5296:	4770      	bxeq	lr
   d5298:	b530      	push	{r4, r5, lr}
   d529a:	f04f 0500 	mov.w	r5, #0
   d529e:	e00a      	b.n	d52b6 <__aeabi_l2d+0x16>

000d52a0 <__aeabi_l2d>:
   d52a0:	ea50 0201 	orrs.w	r2, r0, r1
   d52a4:	bf08      	it	eq
   d52a6:	4770      	bxeq	lr
   d52a8:	b530      	push	{r4, r5, lr}
   d52aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d52ae:	d502      	bpl.n	d52b6 <__aeabi_l2d+0x16>
   d52b0:	4240      	negs	r0, r0
   d52b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d52b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d52ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d52be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d52c2:	f43f aed8 	beq.w	d5076 <__adddf3+0xe6>
   d52c6:	f04f 0203 	mov.w	r2, #3
   d52ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d52ce:	bf18      	it	ne
   d52d0:	3203      	addne	r2, #3
   d52d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d52d6:	bf18      	it	ne
   d52d8:	3203      	addne	r2, #3
   d52da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d52de:	f1c2 0320 	rsb	r3, r2, #32
   d52e2:	fa00 fc03 	lsl.w	ip, r0, r3
   d52e6:	fa20 f002 	lsr.w	r0, r0, r2
   d52ea:	fa01 fe03 	lsl.w	lr, r1, r3
   d52ee:	ea40 000e 	orr.w	r0, r0, lr
   d52f2:	fa21 f102 	lsr.w	r1, r1, r2
   d52f6:	4414      	add	r4, r2
   d52f8:	e6bd      	b.n	d5076 <__adddf3+0xe6>
   d52fa:	bf00      	nop

000d52fc <__aeabi_dmul>:
   d52fc:	b570      	push	{r4, r5, r6, lr}
   d52fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5302:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5306:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d530a:	bf1d      	ittte	ne
   d530c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5310:	ea94 0f0c 	teqne	r4, ip
   d5314:	ea95 0f0c 	teqne	r5, ip
   d5318:	f000 f8de 	bleq	d54d8 <__aeabi_dmul+0x1dc>
   d531c:	442c      	add	r4, r5
   d531e:	ea81 0603 	eor.w	r6, r1, r3
   d5322:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5326:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d532a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d532e:	bf18      	it	ne
   d5330:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5334:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d533c:	d038      	beq.n	d53b0 <__aeabi_dmul+0xb4>
   d533e:	fba0 ce02 	umull	ip, lr, r0, r2
   d5342:	f04f 0500 	mov.w	r5, #0
   d5346:	fbe1 e502 	umlal	lr, r5, r1, r2
   d534a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d534e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5352:	f04f 0600 	mov.w	r6, #0
   d5356:	fbe1 5603 	umlal	r5, r6, r1, r3
   d535a:	f09c 0f00 	teq	ip, #0
   d535e:	bf18      	it	ne
   d5360:	f04e 0e01 	orrne.w	lr, lr, #1
   d5364:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5368:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d536c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5370:	d204      	bcs.n	d537c <__aeabi_dmul+0x80>
   d5372:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5376:	416d      	adcs	r5, r5
   d5378:	eb46 0606 	adc.w	r6, r6, r6
   d537c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5380:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5384:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5388:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d538c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5390:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5394:	bf88      	it	hi
   d5396:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d539a:	d81e      	bhi.n	d53da <__aeabi_dmul+0xde>
   d539c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d53a0:	bf08      	it	eq
   d53a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d53a6:	f150 0000 	adcs.w	r0, r0, #0
   d53aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d53ae:	bd70      	pop	{r4, r5, r6, pc}
   d53b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d53b4:	ea46 0101 	orr.w	r1, r6, r1
   d53b8:	ea40 0002 	orr.w	r0, r0, r2
   d53bc:	ea81 0103 	eor.w	r1, r1, r3
   d53c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d53c4:	bfc2      	ittt	gt
   d53c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d53ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d53ce:	bd70      	popgt	{r4, r5, r6, pc}
   d53d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d53d4:	f04f 0e00 	mov.w	lr, #0
   d53d8:	3c01      	subs	r4, #1
   d53da:	f300 80ab 	bgt.w	d5534 <__aeabi_dmul+0x238>
   d53de:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d53e2:	bfde      	ittt	le
   d53e4:	2000      	movle	r0, #0
   d53e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d53ea:	bd70      	pople	{r4, r5, r6, pc}
   d53ec:	f1c4 0400 	rsb	r4, r4, #0
   d53f0:	3c20      	subs	r4, #32
   d53f2:	da35      	bge.n	d5460 <__aeabi_dmul+0x164>
   d53f4:	340c      	adds	r4, #12
   d53f6:	dc1b      	bgt.n	d5430 <__aeabi_dmul+0x134>
   d53f8:	f104 0414 	add.w	r4, r4, #20
   d53fc:	f1c4 0520 	rsb	r5, r4, #32
   d5400:	fa00 f305 	lsl.w	r3, r0, r5
   d5404:	fa20 f004 	lsr.w	r0, r0, r4
   d5408:	fa01 f205 	lsl.w	r2, r1, r5
   d540c:	ea40 0002 	orr.w	r0, r0, r2
   d5410:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5414:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5418:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d541c:	fa21 f604 	lsr.w	r6, r1, r4
   d5420:	eb42 0106 	adc.w	r1, r2, r6
   d5424:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5428:	bf08      	it	eq
   d542a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d542e:	bd70      	pop	{r4, r5, r6, pc}
   d5430:	f1c4 040c 	rsb	r4, r4, #12
   d5434:	f1c4 0520 	rsb	r5, r4, #32
   d5438:	fa00 f304 	lsl.w	r3, r0, r4
   d543c:	fa20 f005 	lsr.w	r0, r0, r5
   d5440:	fa01 f204 	lsl.w	r2, r1, r4
   d5444:	ea40 0002 	orr.w	r0, r0, r2
   d5448:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d544c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5450:	f141 0100 	adc.w	r1, r1, #0
   d5454:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5458:	bf08      	it	eq
   d545a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d545e:	bd70      	pop	{r4, r5, r6, pc}
   d5460:	f1c4 0520 	rsb	r5, r4, #32
   d5464:	fa00 f205 	lsl.w	r2, r0, r5
   d5468:	ea4e 0e02 	orr.w	lr, lr, r2
   d546c:	fa20 f304 	lsr.w	r3, r0, r4
   d5470:	fa01 f205 	lsl.w	r2, r1, r5
   d5474:	ea43 0302 	orr.w	r3, r3, r2
   d5478:	fa21 f004 	lsr.w	r0, r1, r4
   d547c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5480:	fa21 f204 	lsr.w	r2, r1, r4
   d5484:	ea20 0002 	bic.w	r0, r0, r2
   d5488:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d548c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5490:	bf08      	it	eq
   d5492:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5496:	bd70      	pop	{r4, r5, r6, pc}
   d5498:	f094 0f00 	teq	r4, #0
   d549c:	d10f      	bne.n	d54be <__aeabi_dmul+0x1c2>
   d549e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d54a2:	0040      	lsls	r0, r0, #1
   d54a4:	eb41 0101 	adc.w	r1, r1, r1
   d54a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d54ac:	bf08      	it	eq
   d54ae:	3c01      	subeq	r4, #1
   d54b0:	d0f7      	beq.n	d54a2 <__aeabi_dmul+0x1a6>
   d54b2:	ea41 0106 	orr.w	r1, r1, r6
   d54b6:	f095 0f00 	teq	r5, #0
   d54ba:	bf18      	it	ne
   d54bc:	4770      	bxne	lr
   d54be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d54c2:	0052      	lsls	r2, r2, #1
   d54c4:	eb43 0303 	adc.w	r3, r3, r3
   d54c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d54cc:	bf08      	it	eq
   d54ce:	3d01      	subeq	r5, #1
   d54d0:	d0f7      	beq.n	d54c2 <__aeabi_dmul+0x1c6>
   d54d2:	ea43 0306 	orr.w	r3, r3, r6
   d54d6:	4770      	bx	lr
   d54d8:	ea94 0f0c 	teq	r4, ip
   d54dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d54e0:	bf18      	it	ne
   d54e2:	ea95 0f0c 	teqne	r5, ip
   d54e6:	d00c      	beq.n	d5502 <__aeabi_dmul+0x206>
   d54e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d54ec:	bf18      	it	ne
   d54ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d54f2:	d1d1      	bne.n	d5498 <__aeabi_dmul+0x19c>
   d54f4:	ea81 0103 	eor.w	r1, r1, r3
   d54f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d54fc:	f04f 0000 	mov.w	r0, #0
   d5500:	bd70      	pop	{r4, r5, r6, pc}
   d5502:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5506:	bf06      	itte	eq
   d5508:	4610      	moveq	r0, r2
   d550a:	4619      	moveq	r1, r3
   d550c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5510:	d019      	beq.n	d5546 <__aeabi_dmul+0x24a>
   d5512:	ea94 0f0c 	teq	r4, ip
   d5516:	d102      	bne.n	d551e <__aeabi_dmul+0x222>
   d5518:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d551c:	d113      	bne.n	d5546 <__aeabi_dmul+0x24a>
   d551e:	ea95 0f0c 	teq	r5, ip
   d5522:	d105      	bne.n	d5530 <__aeabi_dmul+0x234>
   d5524:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5528:	bf1c      	itt	ne
   d552a:	4610      	movne	r0, r2
   d552c:	4619      	movne	r1, r3
   d552e:	d10a      	bne.n	d5546 <__aeabi_dmul+0x24a>
   d5530:	ea81 0103 	eor.w	r1, r1, r3
   d5534:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5538:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d553c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5540:	f04f 0000 	mov.w	r0, #0
   d5544:	bd70      	pop	{r4, r5, r6, pc}
   d5546:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d554a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d554e:	bd70      	pop	{r4, r5, r6, pc}

000d5550 <__aeabi_ddiv>:
   d5550:	b570      	push	{r4, r5, r6, lr}
   d5552:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d555a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d555e:	bf1d      	ittte	ne
   d5560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5564:	ea94 0f0c 	teqne	r4, ip
   d5568:	ea95 0f0c 	teqne	r5, ip
   d556c:	f000 f8a7 	bleq	d56be <__aeabi_ddiv+0x16e>
   d5570:	eba4 0405 	sub.w	r4, r4, r5
   d5574:	ea81 0e03 	eor.w	lr, r1, r3
   d5578:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d557c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5580:	f000 8088 	beq.w	d5694 <__aeabi_ddiv+0x144>
   d5584:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5588:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d558c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5590:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5594:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5598:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d559c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d55a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d55a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d55a8:	429d      	cmp	r5, r3
   d55aa:	bf08      	it	eq
   d55ac:	4296      	cmpeq	r6, r2
   d55ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d55b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d55b6:	d202      	bcs.n	d55be <__aeabi_ddiv+0x6e>
   d55b8:	085b      	lsrs	r3, r3, #1
   d55ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d55be:	1ab6      	subs	r6, r6, r2
   d55c0:	eb65 0503 	sbc.w	r5, r5, r3
   d55c4:	085b      	lsrs	r3, r3, #1
   d55c6:	ea4f 0232 	mov.w	r2, r2, rrx
   d55ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d55ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d55d2:	ebb6 0e02 	subs.w	lr, r6, r2
   d55d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d55da:	bf22      	ittt	cs
   d55dc:	1ab6      	subcs	r6, r6, r2
   d55de:	4675      	movcs	r5, lr
   d55e0:	ea40 000c 	orrcs.w	r0, r0, ip
   d55e4:	085b      	lsrs	r3, r3, #1
   d55e6:	ea4f 0232 	mov.w	r2, r2, rrx
   d55ea:	ebb6 0e02 	subs.w	lr, r6, r2
   d55ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d55f2:	bf22      	ittt	cs
   d55f4:	1ab6      	subcs	r6, r6, r2
   d55f6:	4675      	movcs	r5, lr
   d55f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d55fc:	085b      	lsrs	r3, r3, #1
   d55fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d5602:	ebb6 0e02 	subs.w	lr, r6, r2
   d5606:	eb75 0e03 	sbcs.w	lr, r5, r3
   d560a:	bf22      	ittt	cs
   d560c:	1ab6      	subcs	r6, r6, r2
   d560e:	4675      	movcs	r5, lr
   d5610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5614:	085b      	lsrs	r3, r3, #1
   d5616:	ea4f 0232 	mov.w	r2, r2, rrx
   d561a:	ebb6 0e02 	subs.w	lr, r6, r2
   d561e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5622:	bf22      	ittt	cs
   d5624:	1ab6      	subcs	r6, r6, r2
   d5626:	4675      	movcs	r5, lr
   d5628:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d562c:	ea55 0e06 	orrs.w	lr, r5, r6
   d5630:	d018      	beq.n	d5664 <__aeabi_ddiv+0x114>
   d5632:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5636:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d563a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d563e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5642:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5646:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d564a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d564e:	d1c0      	bne.n	d55d2 <__aeabi_ddiv+0x82>
   d5650:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5654:	d10b      	bne.n	d566e <__aeabi_ddiv+0x11e>
   d5656:	ea41 0100 	orr.w	r1, r1, r0
   d565a:	f04f 0000 	mov.w	r0, #0
   d565e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5662:	e7b6      	b.n	d55d2 <__aeabi_ddiv+0x82>
   d5664:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5668:	bf04      	itt	eq
   d566a:	4301      	orreq	r1, r0
   d566c:	2000      	moveq	r0, #0
   d566e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5672:	bf88      	it	hi
   d5674:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5678:	f63f aeaf 	bhi.w	d53da <__aeabi_dmul+0xde>
   d567c:	ebb5 0c03 	subs.w	ip, r5, r3
   d5680:	bf04      	itt	eq
   d5682:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5686:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d568a:	f150 0000 	adcs.w	r0, r0, #0
   d568e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5692:	bd70      	pop	{r4, r5, r6, pc}
   d5694:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5698:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d569c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d56a0:	bfc2      	ittt	gt
   d56a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d56a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d56aa:	bd70      	popgt	{r4, r5, r6, pc}
   d56ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d56b0:	f04f 0e00 	mov.w	lr, #0
   d56b4:	3c01      	subs	r4, #1
   d56b6:	e690      	b.n	d53da <__aeabi_dmul+0xde>
   d56b8:	ea45 0e06 	orr.w	lr, r5, r6
   d56bc:	e68d      	b.n	d53da <__aeabi_dmul+0xde>
   d56be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d56c2:	ea94 0f0c 	teq	r4, ip
   d56c6:	bf08      	it	eq
   d56c8:	ea95 0f0c 	teqeq	r5, ip
   d56cc:	f43f af3b 	beq.w	d5546 <__aeabi_dmul+0x24a>
   d56d0:	ea94 0f0c 	teq	r4, ip
   d56d4:	d10a      	bne.n	d56ec <__aeabi_ddiv+0x19c>
   d56d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d56da:	f47f af34 	bne.w	d5546 <__aeabi_dmul+0x24a>
   d56de:	ea95 0f0c 	teq	r5, ip
   d56e2:	f47f af25 	bne.w	d5530 <__aeabi_dmul+0x234>
   d56e6:	4610      	mov	r0, r2
   d56e8:	4619      	mov	r1, r3
   d56ea:	e72c      	b.n	d5546 <__aeabi_dmul+0x24a>
   d56ec:	ea95 0f0c 	teq	r5, ip
   d56f0:	d106      	bne.n	d5700 <__aeabi_ddiv+0x1b0>
   d56f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d56f6:	f43f aefd 	beq.w	d54f4 <__aeabi_dmul+0x1f8>
   d56fa:	4610      	mov	r0, r2
   d56fc:	4619      	mov	r1, r3
   d56fe:	e722      	b.n	d5546 <__aeabi_dmul+0x24a>
   d5700:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5704:	bf18      	it	ne
   d5706:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d570a:	f47f aec5 	bne.w	d5498 <__aeabi_dmul+0x19c>
   d570e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5712:	f47f af0d 	bne.w	d5530 <__aeabi_dmul+0x234>
   d5716:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d571a:	f47f aeeb 	bne.w	d54f4 <__aeabi_dmul+0x1f8>
   d571e:	e712      	b.n	d5546 <__aeabi_dmul+0x24a>

000d5720 <__aeabi_d2uiz>:
   d5720:	004a      	lsls	r2, r1, #1
   d5722:	d211      	bcs.n	d5748 <__aeabi_d2uiz+0x28>
   d5724:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5728:	d211      	bcs.n	d574e <__aeabi_d2uiz+0x2e>
   d572a:	d50d      	bpl.n	d5748 <__aeabi_d2uiz+0x28>
   d572c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5730:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5734:	d40e      	bmi.n	d5754 <__aeabi_d2uiz+0x34>
   d5736:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d573a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d573e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5742:	fa23 f002 	lsr.w	r0, r3, r2
   d5746:	4770      	bx	lr
   d5748:	f04f 0000 	mov.w	r0, #0
   d574c:	4770      	bx	lr
   d574e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5752:	d102      	bne.n	d575a <__aeabi_d2uiz+0x3a>
   d5754:	f04f 30ff 	mov.w	r0, #4294967295
   d5758:	4770      	bx	lr
   d575a:	f04f 0000 	mov.w	r0, #0
   d575e:	4770      	bx	lr

000d5760 <__cxa_atexit>:
   d5760:	b510      	push	{r4, lr}
   d5762:	4c05      	ldr	r4, [pc, #20]	; (d5778 <__cxa_atexit+0x18>)
   d5764:	4613      	mov	r3, r2
   d5766:	b12c      	cbz	r4, d5774 <__cxa_atexit+0x14>
   d5768:	460a      	mov	r2, r1
   d576a:	4601      	mov	r1, r0
   d576c:	2002      	movs	r0, #2
   d576e:	f3af 8000 	nop.w
   d5772:	bd10      	pop	{r4, pc}
   d5774:	4620      	mov	r0, r4
   d5776:	e7fc      	b.n	d5772 <__cxa_atexit+0x12>
   d5778:	00000000 	.word	0x00000000

000d577c <memcpy>:
   d577c:	440a      	add	r2, r1
   d577e:	4291      	cmp	r1, r2
   d5780:	f100 33ff 	add.w	r3, r0, #4294967295
   d5784:	d100      	bne.n	d5788 <memcpy+0xc>
   d5786:	4770      	bx	lr
   d5788:	b510      	push	{r4, lr}
   d578a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d578e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5792:	4291      	cmp	r1, r2
   d5794:	d1f9      	bne.n	d578a <memcpy+0xe>
   d5796:	bd10      	pop	{r4, pc}

000d5798 <memset>:
   d5798:	4402      	add	r2, r0
   d579a:	4603      	mov	r3, r0
   d579c:	4293      	cmp	r3, r2
   d579e:	d100      	bne.n	d57a2 <memset+0xa>
   d57a0:	4770      	bx	lr
   d57a2:	f803 1b01 	strb.w	r1, [r3], #1
   d57a6:	e7f9      	b.n	d579c <memset+0x4>

000d57a8 <srand>:
   d57a8:	b538      	push	{r3, r4, r5, lr}
   d57aa:	4b0d      	ldr	r3, [pc, #52]	; (d57e0 <srand+0x38>)
   d57ac:	681d      	ldr	r5, [r3, #0]
   d57ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d57b0:	4604      	mov	r4, r0
   d57b2:	b97b      	cbnz	r3, d57d4 <srand+0x2c>
   d57b4:	2018      	movs	r0, #24
   d57b6:	f7fe fec3 	bl	d4540 <malloc>
   d57ba:	4a0a      	ldr	r2, [pc, #40]	; (d57e4 <srand+0x3c>)
   d57bc:	4b0a      	ldr	r3, [pc, #40]	; (d57e8 <srand+0x40>)
   d57be:	63a8      	str	r0, [r5, #56]	; 0x38
   d57c0:	e9c0 2300 	strd	r2, r3, [r0]
   d57c4:	4b09      	ldr	r3, [pc, #36]	; (d57ec <srand+0x44>)
   d57c6:	6083      	str	r3, [r0, #8]
   d57c8:	230b      	movs	r3, #11
   d57ca:	8183      	strh	r3, [r0, #12]
   d57cc:	2201      	movs	r2, #1
   d57ce:	2300      	movs	r3, #0
   d57d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d57d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d57d6:	2200      	movs	r2, #0
   d57d8:	611c      	str	r4, [r3, #16]
   d57da:	615a      	str	r2, [r3, #20]
   d57dc:	bd38      	pop	{r3, r4, r5, pc}
   d57de:	bf00      	nop
   d57e0:	2003e5cc 	.word	0x2003e5cc
   d57e4:	abcd330e 	.word	0xabcd330e
   d57e8:	e66d1234 	.word	0xe66d1234
   d57ec:	0005deec 	.word	0x0005deec

000d57f0 <strlen>:
   d57f0:	4603      	mov	r3, r0
   d57f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d57f6:	2a00      	cmp	r2, #0
   d57f8:	d1fb      	bne.n	d57f2 <strlen+0x2>
   d57fa:	1a18      	subs	r0, r3, r0
   d57fc:	3801      	subs	r0, #1
   d57fe:	4770      	bx	lr

000d5800 <dynalib_user>:
   d5800:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d5810:	0000 0000                                   ....

000d5814 <_ZTVN5spark13EthernetClassE>:
	...
   d581c:	45cf 000d 45c5 000d 45bb 000d 45b1 000d     .E...E...E...E..
   d582c:	45a5 000d 4599 000d 4d01 000d 4d09 000d     .E...E...M...M..
   d583c:	458d 000d 4585 000d 457b 000d 4571 000d     .E...E..{E..qE..
   d584c:	4d39 000d 7061 0070 5925 252d 2d6d 6425     9M..app.%Y-%m-%d
   d585c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d586c:	6d69 0065                                   ime.

000d5870 <_ZTV9IPAddress>:
	...
   d5878:	48f5 000d 48e5 000d 48e7 000d               .H...H...H..

000d5884 <_ZTV9USBSerial>:
	...
   d588c:	49d5 000d 4a3d 000d 4a13 000d 4689 000d     .I..=J...J...F..
   d589c:	4a05 000d 49d7 000d 49e7 000d 4a37 000d     .J...I...I..7J..
   d58ac:	49f7 000d 49d1 000d                         .I...I..

000d58b4 <_ZTV11USARTSerial>:
	...
   d58bc:	4ad9 000d 4b45 000d 4b1d 000d 4689 000d     .J..EK...K...F..
   d58cc:	4aed 000d 4b09 000d 4afb 000d 4b17 000d     .J...K...J...K..
   d58dc:	4adb 000d 4adf 000d                         .J...J..

000d58e4 <_ZTV7TwoWire>:
	...
   d58ec:	4bd5 000d 4c1f 000d 4bf7 000d 4bd7 000d     .K...L...K...K..
   d58fc:	4bff 000d 4c07 000d 4c0f 000d 4c17 000d     .K...L...L...L..

000d590c <_ZTVN5spark9WiFiClassE>:
	...
   d5914:	4ca3 000d 4c99 000d 4c8f 000d 4c51 000d     .L...L...L..QL..
   d5924:	471b 000d 4c83 000d 4d01 000d 4d09 000d     .G...L...M...M..
   d5934:	4c77 000d 4c6f 000d 4c65 000d 4c5b 000d     wL..oL..eL..[L..
   d5944:	4d39 000d                                   9M..

000d5948 <_ZTVN5spark12NetworkClassE>:
	...
   d5950:	4cc1 000d 4ccb 000d 4cd5 000d 4cdf 000d     .L...L...L...L..
   d5960:	4ce9 000d 4cf5 000d 4d01 000d 4d09 000d     .L...L...M...M..
   d5970:	4d11 000d 4d1d 000d 4d25 000d 4d2f 000d     .M...M..%M../M..
   d5980:	4d39 000d                                   9M..

000d5984 <_ZSt7nothrow>:
	...

000d5985 <link_const_variable_data_end>:
   d5985:	00          	.byte	0x00
	...

000d5988 <link_constructors_location>:
   d5988:	000d4139 	.word	0x000d4139
   d598c:	000d45d9 	.word	0x000d45d9
   d5990:	000d4601 	.word	0x000d4601
   d5994:	000d4661 	.word	0x000d4661
   d5998:	000d4729 	.word	0x000d4729
   d599c:	000d4739 	.word	0x000d4739
   d59a0:	000d47a5 	.word	0x000d47a5
   d59a4:	000d4cad 	.word	0x000d4cad
   d59a8:	000d4e19 	.word	0x000d4e19

000d59ac <link_constructors_end>:
   d59ac:	00000000 	.word	0x00000000
